import { isInViewport } from './is-in-viewport';
import { debounceTime, firstValueFrom, fromEvent, map, of, timeout } from 'rxjs';
import { inject, Injectable, PLATFORM_ID } from '@angular/core';
import { DOCUMENT, isPlatformBrowser } from '@angular/common';
import { isCovered } from './is-covered';
import { ScrollUtils } from './scroll-utils';
import { OverflowUtils } from './overflow-utils';
import * as i0 from "@angular/core";
export class ScrollingService {
    constructor() {
        this.platformId = inject(PLATFORM_ID);
        this.isBrowser = isPlatformBrowser(this.platformId);
        this.document = inject(DOCUMENT);
        this.window = this.document.defaultView;
    }
    ensureVisible(htmlElement, options) {
        this.scrollOptions = options;
        const behavior = options.smoothScroll && this.isBrowser ? 'smooth' : 'auto';
        const userScrollContainer = this.scrollOptions.scrollContainer, scrollContainer = ScrollUtils.getScrollContainer(userScrollContainer) ?? document.documentElement;
        if (OverflowUtils.isHeightOverflowing(htmlElement, scrollContainer)) {
            htmlElement.scrollIntoView({
                block: 'start',
                inline: 'start',
                behavior
            });
        }
        else if (options.center && !('safari' in this.window)) {
            htmlElement.scrollIntoView({
                block: 'center',
                inline: 'center',
                behavior
            });
        }
        else if (!isInViewport(htmlElement, 1 /* ElementSides.Bottom */) || isCovered(htmlElement, 1 /* ElementSides.Bottom */)) {
            htmlElement.scrollIntoView({
                block: 'end',
                inline: 'nearest',
                behavior
            });
        }
        else if (!isInViewport(htmlElement, 0 /* ElementSides.Top */) || isCovered(htmlElement, 0 /* ElementSides.Top */)) {
            htmlElement.scrollIntoView({
                block: 'start',
                inline: 'nearest',
                behavior
            });
        }
        else {
            return Promise.resolve();
        }
        return behavior === 'smooth' ? firstValueFrom(this.waitForScrollFinish$) : Promise.resolve();
    }
    get waitForScrollFinish$() {
        const userScrollContainer = this.scrollOptions.scrollContainer, scrollContainer = ScrollUtils.getScrollContainer(userScrollContainer) ?? document;
        return fromEvent(scrollContainer, 'scroll')
            .pipe(timeout({
            each: 75,
            with: () => of(undefined)
        }), debounceTime(50), map(() => undefined));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.5", ngImport: i0, type: ScrollingService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.1.5", ngImport: i0, type: ScrollingService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.5", ngImport: i0, type: ScrollingService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsaW5nLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtdWktdG91ci1jb3JlL3NyYy9saWIvc2Nyb2xsaW5nLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFlLFlBQVksRUFBQyxNQUFNLGtCQUFrQixDQUFDO0FBQzVELE9BQU8sRUFBQyxZQUFZLEVBQUUsY0FBYyxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLE9BQU8sRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUMvRSxPQUFPLEVBQUMsTUFBTSxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFDLFFBQVEsRUFBRSxpQkFBaUIsRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBQzVELE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxjQUFjLENBQUM7QUFDdkMsT0FBTyxFQUFDLFdBQVcsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQzNDLE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSxrQkFBa0IsQ0FBQzs7QUFZL0MsTUFBTSxPQUFPLGdCQUFnQjtJQUg3QjtRQUtxQixlQUFVLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ2pDLGNBQVMsR0FBRyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDL0MsYUFBUSxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUM1QixXQUFNLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUM7S0F5RHZEO0lBdERHLGFBQWEsQ0FBQyxXQUF3QixFQUFFLE9BQXNCO1FBQzFELElBQUksQ0FBQyxhQUFhLEdBQUcsT0FBTyxDQUFDO1FBRTdCLE1BQU0sUUFBUSxHQUFtQixPQUFPLENBQUMsWUFBWSxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO1FBRTVGLE1BQU0sbUJBQW1CLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxlQUFlLEVBQzFELGVBQWUsR0FBRyxXQUFXLENBQUMsa0JBQWtCLENBQUMsbUJBQW1CLENBQUMsSUFBSSxRQUFRLENBQUMsZUFBZSxDQUFDO1FBRXRHLElBQUksYUFBYSxDQUFDLG1CQUFtQixDQUFDLFdBQVcsRUFBRSxlQUFlLENBQUMsRUFBRTtZQUNqRSxXQUFXLENBQUMsY0FBYyxDQUFDO2dCQUN2QixLQUFLLEVBQUUsT0FBTztnQkFDZCxNQUFNLEVBQUUsT0FBTztnQkFDZixRQUFRO2FBQ1gsQ0FBQyxDQUFDO1NBQ047YUFBTSxJQUFJLE9BQU8sQ0FBQyxNQUFNLElBQUksQ0FBQyxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDckQsV0FBVyxDQUFDLGNBQWMsQ0FBQztnQkFDdkIsS0FBSyxFQUFFLFFBQVE7Z0JBQ2YsTUFBTSxFQUFFLFFBQVE7Z0JBQ2hCLFFBQVE7YUFDWCxDQUFDLENBQUM7U0FDTjthQUFNLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyw4QkFBc0IsSUFBSSxTQUFTLENBQUMsV0FBVyw4QkFBc0IsRUFBRTtZQUN2RyxXQUFXLENBQUMsY0FBYyxDQUFDO2dCQUN2QixLQUFLLEVBQUUsS0FBSztnQkFDWixNQUFNLEVBQUUsU0FBUztnQkFDakIsUUFBUTthQUNYLENBQUMsQ0FBQztTQUNOO2FBQU0sSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLDJCQUFtQixJQUFJLFNBQVMsQ0FBQyxXQUFXLDJCQUFtQixFQUFFO1lBQ2pHLFdBQVcsQ0FBQyxjQUFjLENBQUM7Z0JBQ3ZCLEtBQUssRUFBRSxPQUFPO2dCQUNkLE1BQU0sRUFBRSxTQUFTO2dCQUNqQixRQUFRO2FBQ1gsQ0FBQyxDQUFDO1NBQ047YUFBTTtZQUNILE9BQU8sT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDO1NBQzVCO1FBRUQsT0FBTyxRQUFRLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNqRyxDQUFDO0lBRUQsSUFBWSxvQkFBb0I7UUFDNUIsTUFBTSxtQkFBbUIsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLGVBQWUsRUFDMUQsZUFBZSxHQUFHLFdBQVcsQ0FBQyxrQkFBa0IsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLFFBQVEsQ0FBQztRQUV0RixPQUFPLFNBQVMsQ0FBQyxlQUFlLEVBQUUsUUFBUSxDQUFDO2FBQ3RDLElBQUksQ0FDRCxPQUFPLENBQUM7WUFDSixJQUFJLEVBQUUsRUFBRTtZQUNSLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDO1NBQzVCLENBQUMsRUFDRixZQUFZLENBQUMsRUFBRSxDQUFDLEVBQ2hCLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FDdkIsQ0FBQztJQUNWLENBQUM7OEdBNURRLGdCQUFnQjtrSEFBaEIsZ0JBQWdCLGNBRmIsTUFBTTs7MkZBRVQsZ0JBQWdCO2tCQUg1QixVQUFVO21CQUFDO29CQUNSLFVBQVUsRUFBRSxNQUFNO2lCQUNyQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RWxlbWVudFNpZGVzLCBpc0luVmlld3BvcnR9IGZyb20gJy4vaXMtaW4tdmlld3BvcnQnO1xyXG5pbXBvcnQge2RlYm91bmNlVGltZSwgZmlyc3RWYWx1ZUZyb20sIGZyb21FdmVudCwgbWFwLCBvZiwgdGltZW91dH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7aW5qZWN0LCBJbmplY3RhYmxlLCBQTEFURk9STV9JRH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7RE9DVU1FTlQsIGlzUGxhdGZvcm1Ccm93c2VyfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xyXG5pbXBvcnQge2lzQ292ZXJlZH0gZnJvbSAnLi9pcy1jb3ZlcmVkJztcclxuaW1wb3J0IHtTY3JvbGxVdGlsc30gZnJvbSAnLi9zY3JvbGwtdXRpbHMnO1xyXG5pbXBvcnQge092ZXJmbG93VXRpbHN9IGZyb20gJy4vb3ZlcmZsb3ctdXRpbHMnO1xyXG5cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgU2Nyb2xsT3B0aW9ucyB7XHJcbiAgICBjZW50ZXI6IGJvb2xlYW47XHJcbiAgICBzbW9vdGhTY3JvbGw6IGJvb2xlYW47XHJcbiAgICBzY3JvbGxDb250YWluZXI/OiBzdHJpbmcgfCBIVE1MRWxlbWVudDtcclxufVxyXG5cclxuQEluamVjdGFibGUoe1xyXG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBTY3JvbGxpbmdTZXJ2aWNlIHtcclxuXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IHBsYXRmb3JtSWQgPSBpbmplY3QoUExBVEZPUk1fSUQpO1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBpc0Jyb3dzZXIgPSBpc1BsYXRmb3JtQnJvd3Nlcih0aGlzLnBsYXRmb3JtSWQpO1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBkb2N1bWVudCA9IGluamVjdChET0NVTUVOVCk7XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IHdpbmRvdyA9IHRoaXMuZG9jdW1lbnQuZGVmYXVsdFZpZXc7XHJcbiAgICBwcml2YXRlIHNjcm9sbE9wdGlvbnM6IFNjcm9sbE9wdGlvbnM7XHJcblxyXG4gICAgZW5zdXJlVmlzaWJsZShodG1sRWxlbWVudDogSFRNTEVsZW1lbnQsIG9wdGlvbnM6IFNjcm9sbE9wdGlvbnMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgICAgICB0aGlzLnNjcm9sbE9wdGlvbnMgPSBvcHRpb25zO1xyXG5cclxuICAgICAgICBjb25zdCBiZWhhdmlvcjogU2Nyb2xsQmVoYXZpb3IgPSBvcHRpb25zLnNtb290aFNjcm9sbCAmJiB0aGlzLmlzQnJvd3NlciA/ICdzbW9vdGgnIDogJ2F1dG8nO1xyXG5cclxuICAgICAgICBjb25zdCB1c2VyU2Nyb2xsQ29udGFpbmVyID0gdGhpcy5zY3JvbGxPcHRpb25zLnNjcm9sbENvbnRhaW5lcixcclxuICAgICAgICAgICAgc2Nyb2xsQ29udGFpbmVyID0gU2Nyb2xsVXRpbHMuZ2V0U2Nyb2xsQ29udGFpbmVyKHVzZXJTY3JvbGxDb250YWluZXIpID8/IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcclxuXHJcbiAgICAgICAgaWYgKE92ZXJmbG93VXRpbHMuaXNIZWlnaHRPdmVyZmxvd2luZyhodG1sRWxlbWVudCwgc2Nyb2xsQ29udGFpbmVyKSkge1xyXG4gICAgICAgICAgICBodG1sRWxlbWVudC5zY3JvbGxJbnRvVmlldyh7XHJcbiAgICAgICAgICAgICAgICBibG9jazogJ3N0YXJ0JyxcclxuICAgICAgICAgICAgICAgIGlubGluZTogJ3N0YXJ0JyxcclxuICAgICAgICAgICAgICAgIGJlaGF2aW9yXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSBpZiAob3B0aW9ucy5jZW50ZXIgJiYgISgnc2FmYXJpJyBpbiB0aGlzLndpbmRvdykpIHtcclxuICAgICAgICAgICAgaHRtbEVsZW1lbnQuc2Nyb2xsSW50b1ZpZXcoe1xyXG4gICAgICAgICAgICAgICAgYmxvY2s6ICdjZW50ZXInLFxyXG4gICAgICAgICAgICAgICAgaW5saW5lOiAnY2VudGVyJyxcclxuICAgICAgICAgICAgICAgIGJlaGF2aW9yXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoIWlzSW5WaWV3cG9ydChodG1sRWxlbWVudCwgRWxlbWVudFNpZGVzLkJvdHRvbSkgfHwgaXNDb3ZlcmVkKGh0bWxFbGVtZW50LCBFbGVtZW50U2lkZXMuQm90dG9tKSkge1xyXG4gICAgICAgICAgICBodG1sRWxlbWVudC5zY3JvbGxJbnRvVmlldyh7XHJcbiAgICAgICAgICAgICAgICBibG9jazogJ2VuZCcsXHJcbiAgICAgICAgICAgICAgICBpbmxpbmU6ICduZWFyZXN0JyxcclxuICAgICAgICAgICAgICAgIGJlaGF2aW9yXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoIWlzSW5WaWV3cG9ydChodG1sRWxlbWVudCwgRWxlbWVudFNpZGVzLlRvcCkgfHwgaXNDb3ZlcmVkKGh0bWxFbGVtZW50LCBFbGVtZW50U2lkZXMuVG9wKSkge1xyXG4gICAgICAgICAgICBodG1sRWxlbWVudC5zY3JvbGxJbnRvVmlldyh7XHJcbiAgICAgICAgICAgICAgICBibG9jazogJ3N0YXJ0JyxcclxuICAgICAgICAgICAgICAgIGlubGluZTogJ25lYXJlc3QnLFxyXG4gICAgICAgICAgICAgICAgYmVoYXZpb3JcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGJlaGF2aW9yID09PSAnc21vb3RoJyA/IGZpcnN0VmFsdWVGcm9tKHRoaXMud2FpdEZvclNjcm9sbEZpbmlzaCQpIDogUHJvbWlzZS5yZXNvbHZlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBnZXQgd2FpdEZvclNjcm9sbEZpbmlzaCQoKSB7XHJcbiAgICAgICAgY29uc3QgdXNlclNjcm9sbENvbnRhaW5lciA9IHRoaXMuc2Nyb2xsT3B0aW9ucy5zY3JvbGxDb250YWluZXIsXHJcbiAgICAgICAgICAgIHNjcm9sbENvbnRhaW5lciA9IFNjcm9sbFV0aWxzLmdldFNjcm9sbENvbnRhaW5lcih1c2VyU2Nyb2xsQ29udGFpbmVyKSA/PyBkb2N1bWVudDtcclxuXHJcbiAgICAgICAgcmV0dXJuIGZyb21FdmVudChzY3JvbGxDb250YWluZXIsICdzY3JvbGwnKVxyXG4gICAgICAgICAgICAucGlwZShcclxuICAgICAgICAgICAgICAgIHRpbWVvdXQoe1xyXG4gICAgICAgICAgICAgICAgICAgIGVhY2g6IDc1LFxyXG4gICAgICAgICAgICAgICAgICAgIHdpdGg6ICgpID0+IG9mKHVuZGVmaW5lZClcclxuICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAgICAgZGVib3VuY2VUaW1lKDUwKSxcclxuICAgICAgICAgICAgICAgIG1hcCgoKSA9PiB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgICk7XHJcbiAgICB9XHJcblxyXG59XHJcbiJdfQ==