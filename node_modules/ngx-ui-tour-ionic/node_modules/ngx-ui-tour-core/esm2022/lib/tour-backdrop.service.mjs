import { inject, Injectable, RendererFactory2 } from '@angular/core';
import { ScrollingService } from './scrolling.service';
import { TourResizeObserverService } from './tour-resize-observer.service';
import { DOCUMENT } from '@angular/common';
import { ScrollUtils } from "./scroll-utils";
import { OverflowUtils } from "./overflow-utils";
import * as i0 from "@angular/core";
export class TourBackdropService {
    constructor() {
        this.isSpotlightClosed = false;
        this.rendererFactory = inject(RendererFactory2);
        this.renderer = this.rendererFactory.createRenderer(null, null);
        this.resizeObserverService = inject(TourResizeObserverService);
        this.scrollingService = inject(ScrollingService);
        this.document = inject(DOCUMENT);
    }
    show(targetElement, step) {
        if (this.targetHtmlElement) {
            this.resizeObserverService.unobserveElement(this.targetHtmlElement);
        }
        this.targetHtmlElement = targetElement.nativeElement;
        this.step = step;
        this.resizeObserverService.observeElement(this.targetHtmlElement);
        if (!this.backdropElements) {
            this.backdropElements = this.createBackdropElements();
            this.subscribeToResizeEvents();
        }
        this.isSpotlightClosed = false;
        this.setBackdropPosition();
    }
    closeSpotlight() {
        if (!this.backdropElements) {
            return;
        }
        const targetRect = this.targetHtmlElement.getBoundingClientRect(), centerX = targetRect.left + (targetRect.width / 2), centerY = targetRect.top + (targetRect.height / 2), centerRect = {
            top: centerY,
            right: centerX,
            bottom: centerY,
            left: centerX,
            width: 0,
            height: 0
        };
        this.isSpotlightClosed = true;
        this.setBackdropPosition(centerRect);
    }
    setBackdropPosition(rectangle = null) {
        const docEl = this.document.documentElement, scrollContainer = ScrollUtils.getScrollContainer(this.step.scrollContainer) ?? docEl, elementBoundingRect = rectangle ?? this.targetHtmlElement.getBoundingClientRect(), scrollContainerRect = scrollContainer.getBoundingClientRect(), visibleSection = OverflowUtils.getVisibleSection(elementBoundingRect, scrollContainerRect), scrollHeight = docEl.scrollHeight, scrollWidth = docEl.scrollWidth, window = this.document.defaultView, scrollX = window.scrollX, scrollY = window.scrollY, offset = this.isSpotlightClosed ? 0 : this.step.backdropConfig?.offset ?? 0, leftRect = {
            width: visibleSection.left + scrollX - offset,
            height: scrollHeight,
            top: 0,
            left: 0
        }, topRect = {
            width: visibleSection.width + offset * 2,
            height: visibleSection.top + scrollY - offset,
            top: 0,
            left: visibleSection.left + scrollX - offset
        }, bottomRect = {
            width: visibleSection.width + offset * 2,
            height: scrollHeight - (visibleSection.bottom + scrollY) - offset,
            top: visibleSection.bottom + scrollY + offset,
            left: visibleSection.left + scrollX - offset
        }, rightRect = {
            width: scrollWidth - (visibleSection.right + scrollX) - offset,
            height: scrollHeight,
            top: 0,
            left: visibleSection.right + scrollX + offset
        }, rectangles = [leftRect, topRect, bottomRect, rightRect];
        for (let i = 0; i < rectangles.length; i++) {
            const styles = this.createBackdropStyles(rectangles[i]);
            this.applyStyles(styles, this.backdropElements[i]);
        }
    }
    subscribeToResizeEvents() {
        this.resizeSubscription = this.resizeObserverService.resize$
            .subscribe(() => {
            this.setBackdropPosition();
            if (!this.step.disableScrollToAnchor) {
                this.scrollingService.ensureVisible(this.targetHtmlElement, {
                    center: this.step.centerAnchorOnScroll,
                    smoothScroll: false
                });
            }
        });
    }
    close() {
        if (this.backdropElements) {
            this.resizeObserverService.unobserveElement(this.targetHtmlElement);
            this.removeBackdropElement();
            this.resizeSubscription.unsubscribe();
        }
    }
    disconnectResizeObserver() {
        this.resizeObserverService.disconnect();
    }
    removeBackdropElement() {
        this.backdropElements.forEach(backdropElement => this.renderer.removeChild(this.parentContainer, backdropElement));
        this.backdropElements = undefined;
    }
    applyStyles(styles, element) {
        for (const name of Object.keys(styles)) {
            this.renderer.setStyle(element, name, styles[name]);
        }
    }
    createBackdropStyles(rectangle) {
        const config = this.step.backdropConfig, normalizedRect = {
            ...rectangle,
            width: Math.max(rectangle.width, 0),
            height: Math.max(rectangle.height, 0)
        };
        return {
            position: 'absolute',
            width: `${normalizedRect.width}px`,
            height: `${normalizedRect.height}px`,
            top: `${normalizedRect.top}px`,
            left: `${normalizedRect.left}px`,
            backgroundColor: config?.backgroundColor ?? 'rgba(0, 0, 0, 0.7)',
            zIndex: config?.zIndex ?? '101'
        };
    }
    createBackdropElement() {
        const backdropElement = this.renderer.createElement('div');
        this.renderer.addClass(backdropElement, 'ngx-ui-tour_backdrop');
        this.renderer.appendChild(this.parentContainer, backdropElement);
        return backdropElement;
    }
    createBackdropElements() {
        return Array
            .from({ length: 4 })
            .map(() => this.createBackdropElement());
    }
    get parentContainer() {
        const parent = this.step.backdropConfig?.parentContainer;
        if (parent instanceof HTMLElement) {
            return parent;
        }
        if (typeof parent === 'string') {
            const queryResult = this.document.documentElement.querySelector(parent);
            return queryResult ?? this.document.body;
        }
        return this.document.body;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.5", ngImport: i0, type: TourBackdropService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.1.5", ngImport: i0, type: TourBackdropService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.5", ngImport: i0, type: TourBackdropService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,