import * as i0 from '@angular/core';
import { Injectable, inject, TemplateRef, Component, ViewChild, Input, ContentChild, ElementRef, Directive, HostBinding, NgModule } from '@angular/core';
import { TourService, TourHotkeyListenerComponent } from 'ngx-ui-tour-core';
import * as i3 from '@ionic/angular';
import { Config, createAnimation, IonPopover, IonicModule } from '@ionic/angular';
import { DOCUMENT, NgTemplateOutlet, NgIf } from '@angular/common';
import { firstValueFrom } from 'rxjs';

class TourStepTemplateService {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.5", ngImport: i0, type: TourStepTemplateService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.1.5", ngImport: i0, type: TourStepTemplateService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.5", ngImport: i0, type: TourStepTemplateService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }] });

class IonTourService extends TourService {
    constructor() {
        super(...arguments);
        this.config = inject(Config);
        this.document = inject(DOCUMENT);
    }
    initialize(steps, stepDefaults) {
        const isIOS = this.config.get('mode') === 'ios';
        stepDefaults ??= {};
        stepDefaults.backdropConfig ??= {};
        stepDefaults.backdropConfig.parentContainer ??= 'ion-app';
        stepDefaults.delayAfterNavigation ??= isIOS ? 700 : 500;
        super.initialize(steps, stepDefaults);
    }
    // noinspection JSUnusedGlobalSymbols
    showStep(step) {
        // In case "scrollContainer" is already set to HTMLElement, we DO want to set it again since the current
        // html element reference might be already removed from DOM
        if (step.smoothScroll && (!step.scrollContainer || typeof step.scrollContainer !== 'string')) {
            const docEl = this.document.documentElement, tabsRouter = docEl.querySelector('ion-router-outlet[tabs=true]'), generalRouter = docEl.querySelector('ion-router-outlet'), router = tabsRouter ?? generalRouter, ionContent = router ? router.querySelector(':scope > .ion-page:not(.ion-page-hidden) ion-content') :
                docEl.querySelector('ion-content');
            step.scrollContainer = ionContent?.shadowRoot.querySelector('[part=scroll]');
        }
        return super.showStep(step);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.5", ngImport: i0, type: IonTourService, deps: null, target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.1.5", ngImport: i0, type: IonTourService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.5", ngImport: i0, type: IonTourService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }] });

class TourStepTemplateComponent extends TourHotkeyListenerComponent {
    constructor(tourStepTemplateService, tourService) {
        super(tourService);
        this.tourStepTemplateService = tourStepTemplateService;
        this.tourService = tourService;
        this.step = {};
        this.noopLeaveAnimation = () => createAnimation();
    }
    ngAfterViewInit() {
        this.tourStepTemplateService.templateComponent = this;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.5", ngImport: i0, type: TourStepTemplateComponent, deps: [{ token: TourStepTemplateService }, { token: IonTourService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.5", type: TourStepTemplateComponent, isStandalone: true, selector: "tour-step-template", inputs: { stepTemplate: "stepTemplate" }, queries: [{ propertyName: "stepTemplateContent", first: true, predicate: TemplateRef, descendants: true }], viewQueries: [{ propertyName: "ionPopover", first: true, predicate: IonPopover, descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: "<ion-popover\r\n    [leaveAnimation]=\"noopLeaveAnimation\"\r\n    [backdropDismiss]=\"false\"\r\n    [keyboardClose]=\"false\"\r\n    [showBackdrop]=\"false\"\r\n    [dismissOnSelect]=\"false\"\r\n    [style.--min-width]=\"step?.stepDimensions?.minWidth\"\r\n    [style.--max-width]=\"step?.stepDimensions?.maxWidth\"\r\n    [style.--width]=\"step?.stepDimensions?.width\"\r\n    [arrow]=\"step?.showArrow ?? true\"\r\n>\r\n    <ng-template>\r\n        <ng-container\r\n            *ngTemplateOutlet=\"\r\n                stepTemplate || stepTemplateContent || defaultTemplate;\r\n                context: {step: step}\r\n            \"\r\n        ></ng-container>\r\n    </ng-template>\r\n</ion-popover>\r\n\r\n<ng-template #defaultTemplate let-step=\"step\">\r\n    <ion-card>\r\n        <ion-card-header>\r\n            <ion-card-title>{{step.title}}</ion-card-title>\r\n            <ion-button\r\n                class=\"close\"\r\n                fill=\"clear\"\r\n                shape=\"round\"\r\n                (click)=\"tourService.end()\"\r\n            >\r\n                <ion-icon slot=\"icon-only\" name=\"close-outline\"></ion-icon>\r\n            </ion-button>\r\n        </ion-card-header>\r\n\r\n        <ion-card-content\r\n            [innerHTML]=\"step.content\"\r\n        ></ion-card-content>\r\n\r\n        <div class=\"footer\">\r\n            <ion-button\r\n                fill=\"clear\"\r\n                [disabled]=\"!tourService.hasPrev(step)\"\r\n                (click)=\"tourService.prev()\"\r\n            >\r\n                <ion-icon slot=\"start\" name=\"chevron-back-outline\"></ion-icon>\r\n                {{step.prevBtnTitle}}\r\n            </ion-button>\r\n            <ion-button\r\n                fill=\"clear\"\r\n                *ngIf=\"tourService.hasNext(step) && !step.nextOnAnchorClick\"\r\n                (click)=\"tourService.next()\"\r\n            >\r\n                {{step.nextBtnTitle}}\r\n                <ion-icon slot=\"end\" name=\"chevron-forward-outline\"></ion-icon>\r\n            </ion-button>\r\n            <ion-button\r\n                fill=\"clear\"\r\n                *ngIf=\"!tourService.hasNext(step)\"\r\n                (click)=\"tourService.end()\"\r\n            >\r\n                {{step.endBtnTitle}}\r\n            </ion-button>\r\n        </div>\r\n    </ion-card>\r\n</ng-template>\r\n", styles: ["ion-popover{pointer-events:none}ion-card{margin:0;pointer-events:auto}ion-card-header{display:flex;flex-direction:row;align-items:center;justify-content:space-between;padding:8px 16px}ion-card-header ion-card-title{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}ion-button.close{--padding-start: 5px;--padding-end: 5px;--padding-top: 5px;--padding-bottom: 5px;margin:0 -8px 0 0}.footer{display:flex;align-items:center;justify-content:space-between;padding:0 8px 8px}.footer ion-button{text-transform:capitalize}\n"], dependencies: [{ kind: "ngmodule", type: IonicModule }, { kind: "component", type: i3.IonButton, selector: "ion-button", inputs: ["buttonType", "color", "disabled", "download", "expand", "fill", "form", "href", "mode", "rel", "routerAnimation", "routerDirection", "shape", "size", "strong", "target", "type"] }, { kind: "component", type: i3.IonCard, selector: "ion-card", inputs: ["button", "color", "disabled", "download", "href", "mode", "rel", "routerAnimation", "routerDirection", "target", "type"] }, { kind: "component", type: i3.IonCardContent, selector: "ion-card-content", inputs: ["mode"] }, { kind: "component", type: i3.IonCardHeader, selector: "ion-card-header", inputs: ["color", "mode", "translucent"] }, { kind: "component", type: i3.IonCardTitle, selector: "ion-card-title", inputs: ["color", "mode"] }, { kind: "component", type: i3.IonIcon, selector: "ion-icon", inputs: ["color", "flipRtl", "icon", "ios", "lazy", "md", "mode", "name", "sanitize", "size", "src"] }, { kind: "component", type: i3.IonPopover, selector: "ion-popover", inputs: ["alignment", "animated", "arrow", "keepContentsMounted", "backdropDismiss", "cssClass", "dismissOnSelect", "enterAnimation", "event", "isOpen", "keyboardClose", "leaveAnimation", "mode", "showBackdrop", "translucent", "trigger", "triggerAction", "reference", "size", "side"] }, { kind: "directive", type: NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.5", ngImport: i0, type: TourStepTemplateComponent, decorators: [{
            type: Component,
            args: [{ selector: 'tour-step-template', standalone: true, imports: [
                        IonicModule,
                        NgTemplateOutlet,
                        NgIf
                    ], template: "<ion-popover\r\n    [leaveAnimation]=\"noopLeaveAnimation\"\r\n    [backdropDismiss]=\"false\"\r\n    [keyboardClose]=\"false\"\r\n    [showBackdrop]=\"false\"\r\n    [dismissOnSelect]=\"false\"\r\n    [style.--min-width]=\"step?.stepDimensions?.minWidth\"\r\n    [style.--max-width]=\"step?.stepDimensions?.maxWidth\"\r\n    [style.--width]=\"step?.stepDimensions?.width\"\r\n    [arrow]=\"step?.showArrow ?? true\"\r\n>\r\n    <ng-template>\r\n        <ng-container\r\n            *ngTemplateOutlet=\"\r\n                stepTemplate || stepTemplateContent || defaultTemplate;\r\n                context: {step: step}\r\n            \"\r\n        ></ng-container>\r\n    </ng-template>\r\n</ion-popover>\r\n\r\n<ng-template #defaultTemplate let-step=\"step\">\r\n    <ion-card>\r\n        <ion-card-header>\r\n            <ion-card-title>{{step.title}}</ion-card-title>\r\n            <ion-button\r\n                class=\"close\"\r\n                fill=\"clear\"\r\n                shape=\"round\"\r\n                (click)=\"tourService.end()\"\r\n            >\r\n                <ion-icon slot=\"icon-only\" name=\"close-outline\"></ion-icon>\r\n            </ion-button>\r\n        </ion-card-header>\r\n\r\n        <ion-card-content\r\n            [innerHTML]=\"step.content\"\r\n        ></ion-card-content>\r\n\r\n        <div class=\"footer\">\r\n            <ion-button\r\n                fill=\"clear\"\r\n                [disabled]=\"!tourService.hasPrev(step)\"\r\n                (click)=\"tourService.prev()\"\r\n            >\r\n                <ion-icon slot=\"start\" name=\"chevron-back-outline\"></ion-icon>\r\n                {{step.prevBtnTitle}}\r\n            </ion-button>\r\n            <ion-button\r\n                fill=\"clear\"\r\n                *ngIf=\"tourService.hasNext(step) && !step.nextOnAnchorClick\"\r\n                (click)=\"tourService.next()\"\r\n            >\r\n                {{step.nextBtnTitle}}\r\n                <ion-icon slot=\"end\" name=\"chevron-forward-outline\"></ion-icon>\r\n            </ion-button>\r\n            <ion-button\r\n                fill=\"clear\"\r\n                *ngIf=\"!tourService.hasNext(step)\"\r\n                (click)=\"tourService.end()\"\r\n            >\r\n                {{step.endBtnTitle}}\r\n            </ion-button>\r\n        </div>\r\n    </ion-card>\r\n</ng-template>\r\n", styles: ["ion-popover{pointer-events:none}ion-card{margin:0;pointer-events:auto}ion-card-header{display:flex;flex-direction:row;align-items:center;justify-content:space-between;padding:8px 16px}ion-card-header ion-card-title{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}ion-button.close{--padding-start: 5px;--padding-end: 5px;--padding-top: 5px;--padding-bottom: 5px;margin:0 -8px 0 0}.footer{display:flex;align-items:center;justify-content:space-between;padding:0 8px 8px}.footer ion-button{text-transform:capitalize}\n"] }]
        }], ctorParameters: function () { return [{ type: TourStepTemplateService }, { type: IonTourService }]; }, propDecorators: { ionPopover: [{
                type: ViewChild,
                args: [IonPopover, { static: true }]
            }], stepTemplate: [{
                type: Input
            }], stepTemplateContent: [{
                type: ContentChild,
                args: [TemplateRef]
            }] } });

class TourAnchorIonPopoverDirective {
    constructor() {
        this.element = inject(ElementRef);
        this.tourService = inject(IonTourService);
        this.stepTemplateService = inject(TourStepTemplateService);
    }
    ngOnInit() {
        this.tourService.register(this.tourAnchor, this);
    }
    ngOnDestroy() {
        this.tourService.unregister(this.tourAnchor);
    }
    async showTourStep(step) {
        const templateComponent = this.stepTemplateService.templateComponent, popover = templateComponent.ionPopover;
        if (popover.isCmpOpen) {
            await firstValueFrom(popover.didDismiss);
        }
        this.isActive = true;
        templateComponent.step = step;
        popover.alignment = step.placement?.alignment;
        popover.side = step.placement?.side ?? 'bottom';
        popover.cssClass = step.popoverClass;
        const event = {
            target: this.element.nativeElement
        };
        await popover.present(event);
    }
    hideTourStep() {
        this.isActive = false;
        const popover = this.stepTemplateService.templateComponent.ionPopover;
        popover.dismiss();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.5", ngImport: i0, type: TourAnchorIonPopoverDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.5", type: TourAnchorIonPopoverDirective, isStandalone: true, selector: "[tourAnchor]", inputs: { tourAnchor: "tourAnchor" }, host: { properties: { "class.touranchor--is-active": "this.isActive" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.5", ngImport: i0, type: TourAnchorIonPopoverDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tourAnchor]',
                    standalone: true
                }]
        }], propDecorators: { tourAnchor: [{
                type: Input
            }], isActive: [{
                type: HostBinding,
                args: ['class.touranchor--is-active']
            }] } });

const COMPONENTS = [TourStepTemplateComponent, TourAnchorIonPopoverDirective];
class TourIonPopoverModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.5", ngImport: i0, type: TourIonPopoverModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.1.5", ngImport: i0, type: TourIonPopoverModule, imports: [TourStepTemplateComponent, TourAnchorIonPopoverDirective], exports: [TourStepTemplateComponent, TourAnchorIonPopoverDirective] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.1.5", ngImport: i0, type: TourIonPopoverModule, imports: [TourStepTemplateComponent] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.5", ngImport: i0, type: TourIonPopoverModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: COMPONENTS,
                    exports: COMPONENTS
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { TourAnchorIonPopoverDirective, TourIonPopoverModule, IonTourService as TourService, TourStepTemplateComponent };
//# sourceMappingURL=ngx-ui-tour-ionic.mjs.map
