import { Directive, ElementRef, HostBinding, inject, Input } from '@angular/core';
import { IonTourService } from './ion-tour.service';
import { TourStepTemplateService } from './tour-step-template.service';
import { firstValueFrom } from 'rxjs';
import * as i0 from "@angular/core";
export class TourAnchorIonPopoverDirective {
    constructor() {
        this.element = inject(ElementRef);
        this.tourService = inject(IonTourService);
        this.stepTemplateService = inject(TourStepTemplateService);
    }
    ngOnInit() {
        this.tourService.register(this.tourAnchor, this);
    }
    ngOnDestroy() {
        this.tourService.unregister(this.tourAnchor);
    }
    async showTourStep(step) {
        const templateComponent = this.stepTemplateService.templateComponent, popover = templateComponent.ionPopover;
        if (popover.isCmpOpen) {
            await firstValueFrom(popover.didDismiss);
        }
        this.isActive = true;
        templateComponent.step = step;
        popover.alignment = step.placement?.alignment;
        popover.side = step.placement?.side ?? 'bottom';
        popover.cssClass = step.popoverClass;
        const event = {
            target: this.element.nativeElement
        };
        await popover.present(event);
    }
    hideTourStep() {
        this.isActive = false;
        const popover = this.stepTemplateService.templateComponent.ionPopover;
        popover.dismiss();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.5", ngImport: i0, type: TourAnchorIonPopoverDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.5", type: TourAnchorIonPopoverDirective, isStandalone: true, selector: "[tourAnchor]", inputs: { tourAnchor: "tourAnchor" }, host: { properties: { "class.touranchor--is-active": "this.isActive" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.5", ngImport: i0, type: TourAnchorIonPopoverDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tourAnchor]',
                    standalone: true
                }]
        }], propDecorators: { tourAnchor: [{
                type: Input
            }], isActive: [{
                type: HostBinding,
                args: ['class.touranchor--is-active']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG91ci1hbmNob3IuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LXVpLXRvdXItaW9uaWMvc3JjL2xpYi90b3VyLWFuY2hvci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQW9CLE1BQU0sZUFBZSxDQUFDO0FBRW5HLE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSxvQkFBb0IsQ0FBQztBQUNsRCxPQUFPLEVBQUMsdUJBQXVCLEVBQUMsTUFBTSw4QkFBOEIsQ0FBQztBQUVyRSxPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0sTUFBTSxDQUFDOztBQU1wQyxNQUFNLE9BQU8sNkJBQTZCO0lBSjFDO1FBWW9CLFlBQU8sR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDNUIsZ0JBQVcsR0FBRyxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDckMsd0JBQW1CLEdBQUcsTUFBTSxDQUFDLHVCQUF1QixDQUFDLENBQUM7S0FzQzFFO0lBcENHLFFBQVE7UUFDSixJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3JELENBQUM7SUFFRCxXQUFXO1FBQ1AsSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ2pELENBQUM7SUFFRCxLQUFLLENBQUMsWUFBWSxDQUFDLElBQW1CO1FBQ2xDLE1BQU0saUJBQWlCLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLGlCQUFpQixFQUNoRSxPQUFPLEdBQUcsaUJBQWlCLENBQUMsVUFBVSxDQUFDO1FBRTNDLElBQUksT0FBTyxDQUFDLFNBQVMsRUFBRTtZQUNuQixNQUFNLGNBQWMsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDNUM7UUFFRCxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztRQUNyQixpQkFBaUIsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQzlCLE9BQU8sQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsRUFBRSxTQUFTLENBQUM7UUFDOUMsT0FBTyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksSUFBSSxRQUFRLENBQUM7UUFDaEQsT0FBTyxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDO1FBRXJDLE1BQU0sS0FBSyxHQUFHO1lBQ1YsTUFBTSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYTtTQUN2QixDQUFDO1FBRWhCLE1BQU0sT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNqQyxDQUFDO0lBRUQsWUFBWTtRQUNSLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO1FBQ3RCLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxVQUFVLENBQUM7UUFFdEUsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ3RCLENBQUM7OEdBOUNRLDZCQUE2QjtrR0FBN0IsNkJBQTZCOzsyRkFBN0IsNkJBQTZCO2tCQUp6QyxTQUFTO21CQUFDO29CQUNQLFFBQVEsRUFBRSxjQUFjO29CQUN4QixVQUFVLEVBQUUsSUFBSTtpQkFDbkI7OEJBSVUsVUFBVTtzQkFEaEIsS0FBSztnQkFJQyxRQUFRO3NCQURkLFdBQVc7dUJBQUMsNkJBQTZCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEhvc3RCaW5kaW5nLCBpbmplY3QsIElucHV0LCBPbkRlc3Ryb3ksIE9uSW5pdH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7VG91ckFuY2hvckRpcmVjdGl2ZX0gZnJvbSAnbmd4LXVpLXRvdXItY29yZSc7XHJcbmltcG9ydCB7SW9uVG91clNlcnZpY2V9IGZyb20gJy4vaW9uLXRvdXIuc2VydmljZSc7XHJcbmltcG9ydCB7VG91clN0ZXBUZW1wbGF0ZVNlcnZpY2V9IGZyb20gJy4vdG91ci1zdGVwLXRlbXBsYXRlLnNlcnZpY2UnO1xyXG5pbXBvcnQge0lvblN0ZXBPcHRpb259IGZyb20gJy4vc3RlcC1vcHRpb24uaW50ZXJmYWNlJztcclxuaW1wb3J0IHtmaXJzdFZhbHVlRnJvbX0gZnJvbSAncnhqcyc7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICAgIHNlbGVjdG9yOiAnW3RvdXJBbmNob3JdJyxcclxuICAgIHN0YW5kYWxvbmU6IHRydWVcclxufSlcclxuZXhwb3J0IGNsYXNzIFRvdXJBbmNob3JJb25Qb3BvdmVyRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3ksIFRvdXJBbmNob3JEaXJlY3RpdmUge1xyXG5cclxuICAgIEBJbnB1dCgpXHJcbiAgICBwdWJsaWMgdG91ckFuY2hvcjogc3RyaW5nO1xyXG5cclxuICAgIEBIb3N0QmluZGluZygnY2xhc3MudG91cmFuY2hvci0taXMtYWN0aXZlJylcclxuICAgIHB1YmxpYyBpc0FjdGl2ZTogYm9vbGVhbjtcclxuXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgZWxlbWVudCA9IGluamVjdChFbGVtZW50UmVmKTtcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgdG91clNlcnZpY2UgPSBpbmplY3QoSW9uVG91clNlcnZpY2UpO1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBzdGVwVGVtcGxhdGVTZXJ2aWNlID0gaW5qZWN0KFRvdXJTdGVwVGVtcGxhdGVTZXJ2aWNlKTtcclxuXHJcbiAgICBuZ09uSW5pdCgpIHtcclxuICAgICAgICB0aGlzLnRvdXJTZXJ2aWNlLnJlZ2lzdGVyKHRoaXMudG91ckFuY2hvciwgdGhpcyk7XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkRlc3Ryb3koKSB7XHJcbiAgICAgICAgdGhpcy50b3VyU2VydmljZS51bnJlZ2lzdGVyKHRoaXMudG91ckFuY2hvcik7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgc2hvd1RvdXJTdGVwKHN0ZXA6IElvblN0ZXBPcHRpb24pIHtcclxuICAgICAgICBjb25zdCB0ZW1wbGF0ZUNvbXBvbmVudCA9IHRoaXMuc3RlcFRlbXBsYXRlU2VydmljZS50ZW1wbGF0ZUNvbXBvbmVudCxcclxuICAgICAgICAgICAgcG9wb3ZlciA9IHRlbXBsYXRlQ29tcG9uZW50LmlvblBvcG92ZXI7XHJcblxyXG4gICAgICAgIGlmIChwb3BvdmVyLmlzQ21wT3Blbikge1xyXG4gICAgICAgICAgICBhd2FpdCBmaXJzdFZhbHVlRnJvbShwb3BvdmVyLmRpZERpc21pc3MpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5pc0FjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgdGVtcGxhdGVDb21wb25lbnQuc3RlcCA9IHN0ZXA7XHJcbiAgICAgICAgcG9wb3Zlci5hbGlnbm1lbnQgPSBzdGVwLnBsYWNlbWVudD8uYWxpZ25tZW50O1xyXG4gICAgICAgIHBvcG92ZXIuc2lkZSA9IHN0ZXAucGxhY2VtZW50Py5zaWRlID8/ICdib3R0b20nO1xyXG4gICAgICAgIHBvcG92ZXIuY3NzQ2xhc3MgPSBzdGVwLnBvcG92ZXJDbGFzcztcclxuXHJcbiAgICAgICAgY29uc3QgZXZlbnQgPSB7XHJcbiAgICAgICAgICAgIHRhcmdldDogdGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnRcclxuICAgICAgICB9IGFzIE1vdXNlRXZlbnQ7XHJcblxyXG4gICAgICAgIGF3YWl0IHBvcG92ZXIucHJlc2VudChldmVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgaGlkZVRvdXJTdGVwKCkge1xyXG4gICAgICAgIHRoaXMuaXNBY3RpdmUgPSBmYWxzZTtcclxuICAgICAgICBjb25zdCBwb3BvdmVyID0gdGhpcy5zdGVwVGVtcGxhdGVTZXJ2aWNlLnRlbXBsYXRlQ29tcG9uZW50LmlvblBvcG92ZXI7XHJcblxyXG4gICAgICAgIHBvcG92ZXIuZGlzbWlzcygpO1xyXG4gICAgfVxyXG5cclxufVxyXG4iXX0=