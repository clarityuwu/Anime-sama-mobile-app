import { TourService } from 'ngx-ui-tour-core';
import { inject, Injectable } from '@angular/core';
import { Config } from '@ionic/angular';
import { DOCUMENT } from '@angular/common';
import * as i0 from "@angular/core";
export class IonTourService extends TourService {
    constructor() {
        super(...arguments);
        this.config = inject(Config);
        this.document = inject(DOCUMENT);
    }
    initialize(steps, stepDefaults) {
        const isIOS = this.config.get('mode') === 'ios';
        stepDefaults ??= {};
        stepDefaults.backdropConfig ??= {};
        stepDefaults.backdropConfig.parentContainer ??= 'ion-app';
        stepDefaults.delayAfterNavigation ??= isIOS ? 700 : 500;
        super.initialize(steps, stepDefaults);
    }
    // noinspection JSUnusedGlobalSymbols
    showStep(step) {
        // In case "scrollContainer" is already set to HTMLElement, we DO want to set it again since the current
        // html element reference might be already removed from DOM
        if (step.smoothScroll && (!step.scrollContainer || typeof step.scrollContainer !== 'string')) {
            const docEl = this.document.documentElement, tabsRouter = docEl.querySelector('ion-router-outlet[tabs=true]'), generalRouter = docEl.querySelector('ion-router-outlet'), router = tabsRouter ?? generalRouter, ionContent = router ? router.querySelector(':scope > .ion-page:not(.ion-page-hidden) ion-content') :
                docEl.querySelector('ion-content');
            step.scrollContainer = ionContent?.shadowRoot.querySelector('[part=scroll]');
        }
        return super.showStep(step);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.5", ngImport: i0, type: IonTourService, deps: null, target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.1.5", ngImport: i0, type: IonTourService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.5", ngImport: i0, type: IonTourService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW9uLXRvdXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25neC11aS10b3VyLWlvbmljL3NyYy9saWIvaW9uLXRvdXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUMsV0FBVyxFQUFDLE1BQU0sa0JBQWtCLENBQUM7QUFDN0MsT0FBTyxFQUFDLE1BQU0sRUFBRSxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDakQsT0FBTyxFQUFDLE1BQU0sRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQ3RDLE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQzs7QUFLekMsTUFBTSxPQUFPLGNBQXdELFNBQVEsV0FBYztJQUgzRjs7UUFLcUIsV0FBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN4QixhQUFRLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0tBK0JoRDtJQTdCbUIsVUFBVSxDQUFDLEtBQVUsRUFBRSxZQUFnQjtRQUNuRCxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxLQUFLLENBQUM7UUFFaEQsWUFBWSxLQUFLLEVBQU8sQ0FBQztRQUN6QixZQUFZLENBQUMsY0FBYyxLQUFLLEVBQUUsQ0FBQztRQUNuQyxZQUFZLENBQUMsY0FBYyxDQUFDLGVBQWUsS0FBSyxTQUFTLENBQUM7UUFDMUQsWUFBWSxDQUFDLG9CQUFvQixLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFBLENBQUMsQ0FBQyxHQUFHLENBQUM7UUFFdkQsS0FBSyxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsWUFBWSxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUVELHFDQUFxQztJQUNsQixRQUFRLENBQUMsSUFBTztRQUMvQix3R0FBd0c7UUFDeEcsMkRBQTJEO1FBQzNELElBQUksSUFBSSxDQUFDLFlBQVksSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLGVBQWUsSUFBSSxPQUFPLElBQUksQ0FBQyxlQUFlLEtBQUssUUFBUSxDQUFDLEVBQUU7WUFDMUYsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxlQUFlLEVBQ3ZDLFVBQVUsR0FBRyxLQUFLLENBQUMsYUFBYSxDQUFDLDhCQUE4QixDQUFnQixFQUMvRSxhQUFhLEdBQUcsS0FBSyxDQUFDLGFBQWEsQ0FBQyxtQkFBbUIsQ0FBZ0IsRUFDdkUsTUFBTSxHQUFHLFVBQVUsSUFBSSxhQUFhLEVBQ3BDLFVBQVUsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsc0RBQXNELENBQUMsQ0FBQyxDQUFDO2dCQUNoRyxLQUFLLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRTNDLElBQUksQ0FBQyxlQUFlLEdBQUcsVUFBVSxFQUFFLFVBQVUsQ0FBQyxhQUFhLENBQUMsZUFBZSxDQUFnQixDQUFDO1NBQy9GO1FBRUQsT0FBTyxLQUFLLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2hDLENBQUM7OEdBaENRLGNBQWM7a0hBQWQsY0FBYyxjQUZYLE1BQU07OzJGQUVULGNBQWM7a0JBSDFCLFVBQVU7bUJBQUM7b0JBQ1IsVUFBVSxFQUFFLE1BQU07aUJBQ3JCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJb25TdGVwT3B0aW9ufSBmcm9tICcuL3N0ZXAtb3B0aW9uLmludGVyZmFjZSc7XHJcbmltcG9ydCB7VG91clNlcnZpY2V9IGZyb20gJ25neC11aS10b3VyLWNvcmUnO1xyXG5pbXBvcnQge2luamVjdCwgSW5qZWN0YWJsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7Q29uZmlnfSBmcm9tICdAaW9uaWMvYW5ndWxhcic7XHJcbmltcG9ydCB7RE9DVU1FTlR9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XHJcblxyXG5ASW5qZWN0YWJsZSh7XHJcbiAgICBwcm92aWRlZEluOiAncm9vdCdcclxufSlcclxuZXhwb3J0IGNsYXNzIElvblRvdXJTZXJ2aWNlPFQgZXh0ZW5kcyBJb25TdGVwT3B0aW9uID0gSW9uU3RlcE9wdGlvbj4gZXh0ZW5kcyBUb3VyU2VydmljZTxUPiB7XHJcblxyXG4gICAgcHJpdmF0ZSByZWFkb25seSBjb25maWcgPSBpbmplY3QoQ29uZmlnKTtcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgZG9jdW1lbnQgPSBpbmplY3QoRE9DVU1FTlQpO1xyXG5cclxuICAgIHB1YmxpYyBvdmVycmlkZSBpbml0aWFsaXplKHN0ZXBzOiBUW10sIHN0ZXBEZWZhdWx0cz86IFQpIHtcclxuICAgICAgICBjb25zdCBpc0lPUyA9IHRoaXMuY29uZmlnLmdldCgnbW9kZScpID09PSAnaW9zJztcclxuXHJcbiAgICAgICAgc3RlcERlZmF1bHRzID8/PSB7fSBhcyBUO1xyXG4gICAgICAgIHN0ZXBEZWZhdWx0cy5iYWNrZHJvcENvbmZpZyA/Pz0ge307XHJcbiAgICAgICAgc3RlcERlZmF1bHRzLmJhY2tkcm9wQ29uZmlnLnBhcmVudENvbnRhaW5lciA/Pz0gJ2lvbi1hcHAnO1xyXG4gICAgICAgIHN0ZXBEZWZhdWx0cy5kZWxheUFmdGVyTmF2aWdhdGlvbiA/Pz0gaXNJT1MgPyA3MDA6IDUwMDtcclxuXHJcbiAgICAgICAgc3VwZXIuaW5pdGlhbGl6ZShzdGVwcywgc3RlcERlZmF1bHRzKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBub2luc3BlY3Rpb24gSlNVbnVzZWRHbG9iYWxTeW1ib2xzXHJcbiAgICBwcm90ZWN0ZWQgb3ZlcnJpZGUgc2hvd1N0ZXAoc3RlcDogVCk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgICAgIC8vIEluIGNhc2UgXCJzY3JvbGxDb250YWluZXJcIiBpcyBhbHJlYWR5IHNldCB0byBIVE1MRWxlbWVudCwgd2UgRE8gd2FudCB0byBzZXQgaXQgYWdhaW4gc2luY2UgdGhlIGN1cnJlbnRcclxuICAgICAgICAvLyBodG1sIGVsZW1lbnQgcmVmZXJlbmNlIG1pZ2h0IGJlIGFscmVhZHkgcmVtb3ZlZCBmcm9tIERPTVxyXG4gICAgICAgIGlmIChzdGVwLnNtb290aFNjcm9sbCAmJiAoIXN0ZXAuc2Nyb2xsQ29udGFpbmVyIHx8IHR5cGVvZiBzdGVwLnNjcm9sbENvbnRhaW5lciAhPT0gJ3N0cmluZycpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGRvY0VsID0gdGhpcy5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsXHJcbiAgICAgICAgICAgICAgICB0YWJzUm91dGVyID0gZG9jRWwucXVlcnlTZWxlY3RvcignaW9uLXJvdXRlci1vdXRsZXRbdGFicz10cnVlXScpIGFzIEhUTUxFbGVtZW50LFxyXG4gICAgICAgICAgICAgICAgZ2VuZXJhbFJvdXRlciA9IGRvY0VsLnF1ZXJ5U2VsZWN0b3IoJ2lvbi1yb3V0ZXItb3V0bGV0JykgYXMgSFRNTEVsZW1lbnQsXHJcbiAgICAgICAgICAgICAgICByb3V0ZXIgPSB0YWJzUm91dGVyID8/IGdlbmVyYWxSb3V0ZXIsXHJcbiAgICAgICAgICAgICAgICBpb25Db250ZW50ID0gcm91dGVyID8gcm91dGVyLnF1ZXJ5U2VsZWN0b3IoJzpzY29wZSA+IC5pb24tcGFnZTpub3QoLmlvbi1wYWdlLWhpZGRlbikgaW9uLWNvbnRlbnQnKSA6XHJcbiAgICAgICAgICAgICAgICAgICAgZG9jRWwucXVlcnlTZWxlY3RvcignaW9uLWNvbnRlbnQnKTtcclxuXHJcbiAgICAgICAgICAgIHN0ZXAuc2Nyb2xsQ29udGFpbmVyID0gaW9uQ29udGVudD8uc2hhZG93Um9vdC5xdWVyeVNlbGVjdG9yKCdbcGFydD1zY3JvbGxdJykgYXMgSFRNTEVsZW1lbnQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gc3VwZXIuc2hvd1N0ZXAoc3RlcCk7XHJcbiAgICB9XHJcblxyXG59XHJcbiJdfQ==