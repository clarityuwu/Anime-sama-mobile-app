{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"","sourcesContent":["import type { PluginListenerHandle } from '@capacitor/core';\n\nexport interface OrientationLockOptions {\n  orientation: OrientationLockType;\n}\n\nexport interface ScreenOrientationResult {\n  type: OrientationType;\n}\n\nexport interface ScreenOrientationPlugin {\n  /**\n   * Returns the current screen orientation.\n   *\n   * @since 4.0.0\n   */\n  orientation(): Promise<ScreenOrientationResult>;\n\n  /**\n   * Locks the screen orientation.\n   *\n   * @since 4.0.0\n   */\n  lock(options: OrientationLockOptions): Promise<void>;\n\n  /**\n   * Unlocks the screen's orientation.\n   *\n   * @since 4.0.0\n   */\n  unlock(): Promise<void>;\n\n  /**\n   * Listens for screen orientation changes.\n   *\n   * @since 4.0.0\n   */\n  addListener(\n    eventName: 'screenOrientationChange',\n    listenerFunc: (orientation: ScreenOrientationResult) => void,\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n\n  /**\n   * Removes all listeners.\n   *\n   * @since 4.0.0\n   */\n  removeAllListeners(): Promise<void>;\n}\n"]}