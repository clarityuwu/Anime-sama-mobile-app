{"version":3,"file":"web.js","sourceRoot":"","sources":["../../src/web.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAC;AAQ5C,MAAM,OAAO,oBACX,SAAQ,SAAS;IAGjB;QACE,KAAK,EAAE,CAAC;QACR,IACE,OAAO,MAAM,KAAK,WAAW;YAC7B,OAAO,MAAM,CAAC,WAAW,KAAK,WAAW,EACzC;YACA,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,QAAQ,EAAE,GAAG,EAAE;gBACjD,MAAM,IAAI,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC;gBACrC,IAAI,CAAC,eAAe,CAAC,yBAAyB,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC;YAC5D,CAAC,CAAC,CAAC;SACJ;IACH,CAAC;IAED,KAAK,CAAC,WAAW;QACf,IAAI,OAAO,MAAM,KAAK,WAAW,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE;YACxD,MAAM,IAAI,CAAC,WAAW,CACpB,qDAAqD,CACtD,CAAC;SACH;QACD,OAAO,EAAE,IAAI,EAAE,MAAM,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;IAC3C,CAAC;IAED,KAAK,CAAC,IAAI,CAAC,OAA+B;QACxC,IACE,OAAO,MAAM,KAAK,WAAW;YAC7B,CAAC,MAAM,CAAC,WAAW;YACnB,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,EACxB;YACA,MAAM,IAAI,CAAC,WAAW,CACpB,qDAAqD,CACtD,CAAC;SACH;QACD,IAAI;YACF,MAAM,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;SACpD;QAAC,WAAM;YACN,MAAM,IAAI,CAAC,WAAW,CACpB,qDAAqD,CACtD,CAAC;SACH;IACH,CAAC;IAED,KAAK,CAAC,MAAM;QACV,IACE,OAAO,MAAM,KAAK,WAAW;YAC7B,CAAC,MAAM,CAAC,WAAW;YACnB,CAAC,MAAM,CAAC,WAAW,CAAC,MAAM,EAC1B;YACA,MAAM,IAAI,CAAC,WAAW,CACpB,qDAAqD,CACtD,CAAC;SACH;QACD,IAAI;YACF,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC;SAC7B;QAAC,WAAM;YACN,MAAM,IAAI,CAAC,WAAW,CACpB,qDAAqD,CACtD,CAAC;SACH;IACH,CAAC;CACF","sourcesContent":["import { WebPlugin } from '@capacitor/core';\n\nimport type {\n  OrientationLockOptions,\n  ScreenOrientationPlugin,\n  ScreenOrientationResult,\n} from './definitions';\n\nexport class ScreenOrientationWeb\n  extends WebPlugin\n  implements ScreenOrientationPlugin\n{\n  constructor() {\n    super();\n    if (\n      typeof screen !== 'undefined' &&\n      typeof screen.orientation !== 'undefined'\n    ) {\n      screen.orientation.addEventListener('change', () => {\n        const type = screen.orientation.type;\n        this.notifyListeners('screenOrientationChange', { type });\n      });\n    }\n  }\n\n  async orientation(): Promise<ScreenOrientationResult> {\n    if (typeof screen === 'undefined' || !screen.orientation) {\n      throw this.unavailable(\n        'ScreenOrientation API not available in this browser',\n      );\n    }\n    return { type: screen.orientation.type };\n  }\n\n  async lock(options: OrientationLockOptions): Promise<void> {\n    if (\n      typeof screen === 'undefined' ||\n      !screen.orientation ||\n      !screen.orientation.lock\n    ) {\n      throw this.unavailable(\n        'ScreenOrientation API not available in this browser',\n      );\n    }\n    try {\n      await screen.orientation.lock(options.orientation);\n    } catch {\n      throw this.unavailable(\n        'ScreenOrientation API not available in this browser',\n      );\n    }\n  }\n\n  async unlock(): Promise<void> {\n    if (\n      typeof screen === 'undefined' ||\n      !screen.orientation ||\n      !screen.orientation.unlock\n    ) {\n      throw this.unavailable(\n        'ScreenOrientation API not available in this browser',\n      );\n    }\n    try {\n      screen.orientation.unlock();\n    } catch {\n      throw this.unavailable(\n        'ScreenOrientation API not available in this browser',\n      );\n    }\n  }\n}\n"]}