{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"AAyHA,MAAM,CAAN,IAAY,qBAKX;AALD,WAAY,qBAAqB;IAC/B,uEAAW,CAAA;IACX,iGAAwB,CAAA;IACxB,yFAAoB,CAAA;IACpB,6FAAsB,CAAA;AACxB,CAAC,EALW,qBAAqB,KAArB,qBAAqB,QAKhC;AA6BD,MAAM,CAAN,IAAY,2BASX;AATD,WAAY,2BAA2B;IACrC,mFAAW,CAAA;IACX,mFAAW,CAAA;IACX,2FAAe,CAAA;IACf,yFAAc,CAAA;IACd,uFAAa,CAAA;IACb,iFAAU,CAAA;IACV,qFAAY,CAAA;IACZ,0FAAe,CAAA;AACjB,CAAC,EATW,2BAA2B,KAA3B,2BAA2B,QAStC;AAMD,MAAM,CAAN,IAAY,mBA0BX;AA1BD,WAAY,mBAAmB;IAC7B;;OAEG;IACH,yDAAM,CAAA;IACN;;OAEG;IACH,qEAAY,CAAA;IACZ;;OAEG;IACH,iEAAU,CAAA;IACV;;OAEG;IACH,+EAAiB,CAAA;IACjB;;OAEG;IACH,2EAAe,CAAA;IACf;;;OAGG;IACH,6EAAgB,CAAA;AAClB,CAAC,EA1BW,mBAAmB,KAAnB,mBAAmB,QA0B9B","sourcesContent":["import type { PluginListenerHandle } from '@capacitor/core';\n\nexport interface AppUpdatePlugin {\n  /**\n   * Returns app update informations.\n   *\n   * Only available on Android and iOS.\n   */\n  getAppUpdateInfo(options?: GetAppUpdateInfoOptions): Promise<AppUpdateInfo>;\n  /**\n   * Opens the app store entry of the app in the Play Store (Android) or App Store (iOS).\n   *\n   * Only available on Android and iOS.\n   */\n  openAppStore(options?: OpenAppStoreOptions): Promise<void>;\n  /**\n   * Performs an immediate in-app update.\n   *\n   * Only available on Android.\n   */\n  performImmediateUpdate(): Promise<AppUpdateResult>;\n  /**\n   * Starts a flexible in-app update.\n   *\n   * Only available on Android.\n   */\n  startFlexibleUpdate(): Promise<AppUpdateResult>;\n  /**\n   * Completes a flexible in-app update by restarting the app.\n   *\n   * Only available on Android.\n   */\n  completeFlexibleUpdate(): Promise<void>;\n  /**\n   * Adds a flexbile in-app update state change listener.\n   *\n   * Only available on Android.\n   */\n  addListener(\n    eventName: 'onFlexibleUpdateStateChange',\n    listenerFunc: (state: FlexibleUpdateState) => void,\n  ): PluginListenerHandle;\n  /**\n   * Remove all listeners for this plugin.\n   */\n  removeAllListeners(): Promise<void>;\n}\n\nexport interface GetAppUpdateInfoOptions {\n  /**\n   *  The two-letter country code for the store you want to search.\n   *  See http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for a list of ISO Country Codes.\n   *\n   *  Only available on iOS.\n   */\n  country?: string;\n}\n\nexport interface AppUpdateInfo {\n  /**\n   * Version code (Android) or CFBundleShortVersionString (iOS) of the currently installed app version.\n   *\n   * Only available on Android and iOS.\n   */\n  currentVersion: string;\n  /**\n   * Version code (Android) or CFBundleShortVersionString (iOS) of the update.\n   *\n   * Only available on Android and iOS.\n   */\n  availableVersion: string;\n  /**\n   * Release date of the update in ISO 8601 (UTC) format.\n   *\n   * Only available on iOS.\n   */\n  availableVersionReleaseDate?: string;\n  /**\n   * The app update availability.\n   *\n   * Only available on Android and iOS.\n   */\n  updateAvailability: AppUpdateAvailability;\n  /**\n   * In-app update priority for this update, as defined by the developer in the Google Play Developer API.\n   *\n   * Only available on Android.\n   */\n  updatePriority?: number;\n  /**\n   * `true` if an immediate update is allowed, otherwise `false`.\n   *\n   * Only available on Android.\n   */\n  immediateUpdateAllowed?: boolean;\n  /**\n   * `true` if a flexible update is allowed, otherwise `false`.\n   *\n   * Only available on Android.\n   */\n  flexibleUpdateAllowed?: boolean;\n  /**\n   * Number of days since the Google Play Store app on the user's device has learnt about an available update if an update is available or in progress.\n   *\n   * Only available on Android.\n   */\n  clientVersionStalenessDays?: number;\n  /**\n   * Flexible in-app update install status.\n   *\n   * Only available on Android.\n   */\n  installStatus?: FlexibleUpdateInstallStatus;\n  /**\n   * The minimum version of the operating system required for the app to run in iOS.\n   *\n   * Only available on iOS.\n   */\n  minimumOsVersion?: string;\n}\n\nexport enum AppUpdateAvailability {\n  UNKNOWN = 0,\n  UPDATE_NOT_AVAILABLE = 1,\n  UPDATE_AVAILABLE = 2,\n  UPDATE_IN_PROGRESS = 3,\n}\n\nexport interface OpenAppStoreOptions {\n  /**\n   *  The two-letter country code for the store you want to search.\n   *  See http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for a list of ISO Country Codes.\n   *\n   *  Only available on iOS.\n   */\n  country?: string;\n}\n\nexport interface FlexibleUpdateState {\n  /**\n   * Flexible in-app update install status.\n   */\n  installStatus: FlexibleUpdateInstallStatus;\n  /**\n   * Returns the number of bytes downloaded so far.\n   * `undefined` if the install status is other than `DOWNLOADING`.\n   */\n  bytesDownloaded: number | undefined;\n  /**\n   * Returns the total number of bytes to be downloaded for this update.\n   * `undefined` if the install status is other than `DOWNLOADING`.\n   */\n  totalBytesToDownload: number | undefined;\n}\n\nexport enum FlexibleUpdateInstallStatus {\n  UNKNOWN = 0,\n  PENDING = 1,\n  DOWNLOADING = 2,\n  INSTALLING = 3,\n  INSTALLED = 4,\n  FAILED = 5,\n  CANCELED = 6,\n  DOWNLOADED = 11,\n}\n\nexport interface AppUpdateResult {\n  code: AppUpdateResultCode;\n}\n\nexport enum AppUpdateResultCode {\n  /**\n   * The user has accepted the update.\n   */\n  OK = 0,\n  /**\n   * The user has denied or cancelled the update.\n   */\n  CANCELED = 1,\n  /**\n   * Some other error prevented either the user from providing consent or the update to proceed.\n   */\n  FAILED = 2,\n  /**\n   * No update available.\n   */\n  NOT_AVAILABLE = 3,\n  /**\n   * Update type not allowed.\n   */\n  NOT_ALLOWED = 4,\n  /**\n   * App update info missing.\n   * You must call `getAppUpdateInfo()` before requesting an update.\n   */\n  INFO_MISSING = 5,\n}\n"]}