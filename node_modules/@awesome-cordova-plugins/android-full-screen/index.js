var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
/**
 * Bit flag values for setSystemUiVisibility()
 *
 * @see  https://developer.android.com/reference/android/view/View.html#setSystemUiVisibility(int)
 */
export var AndroidSystemUiFlags;
(function (AndroidSystemUiFlags) {
    /** View has requested the system UI (status bar) to be visible (the default). SYSTEM_UI_FLAG_VISIBLE */
    AndroidSystemUiFlags[AndroidSystemUiFlags["Visible"] = 0] = "Visible";
    /** View has requested the system UI to enter an unobtrusive "low profile" mode. SYSTEM_UI_FLAG_LOW_PROFILE */
    AndroidSystemUiFlags[AndroidSystemUiFlags["LowProfile"] = 1] = "LowProfile";
    /** View has requested that the system navigation be temporarily hidden. SYSTEM_UI_FLAG_HIDE_NAVIGATION */
    AndroidSystemUiFlags[AndroidSystemUiFlags["HideNavigation"] = 2] = "HideNavigation";
    /** View has requested to go into the normal fullscreen mode so that its content can take over the screen while still allowing the user to interact with the application. SYSTEM_UI_FLAG_FULLSCREEN */
    AndroidSystemUiFlags[AndroidSystemUiFlags["Fullscreen"] = 4] = "Fullscreen";
    /** When using other layout flags, we would like a stable view of the content insets given to fitSystemWindows(Rect). SYSTEM_UI_FLAG_LAYOUT_STABLE */
    AndroidSystemUiFlags[AndroidSystemUiFlags["LayoutStable"] = 256] = "LayoutStable";
    /** View would like its window to be laid out as if it has requested SYSTEM_UI_FLAG_HIDE_NAVIGATION, even if it currently hasn't. SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION */
    AndroidSystemUiFlags[AndroidSystemUiFlags["LayoutHideNavigation"] = 512] = "LayoutHideNavigation";
    /** View would like its window to be laid out as if it has requested SYSTEM_UI_FLAG_FULLSCREEN, even if it currently hasn't. SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN */
    AndroidSystemUiFlags[AndroidSystemUiFlags["LayoutFullscreen"] = 1024] = "LayoutFullscreen";
    /** View would like to remain interactive when hiding the navigation bar with SYSTEM_UI_FLAG_HIDE_NAVIGATION. SYSTEM_UI_FLAG_IMMERSIVE */
    AndroidSystemUiFlags[AndroidSystemUiFlags["Immersive"] = 2048] = "Immersive";
    /** View would like to remain interactive when hiding the status bar with SYSTEM_UI_FLAG_FULLSCREEN and/or hiding the navigation bar with SYSTEM_UI_FLAG_HIDE_NAVIGATION. SYSTEM_UI_FLAG_IMMERSIVE_STICKY */
    AndroidSystemUiFlags[AndroidSystemUiFlags["ImmersiveSticky"] = 4096] = "ImmersiveSticky";
    /** Requests the status bar to draw in a mode that is compatible with light status bar backgrounds. SYSTEM_UI_FLAG_LIGHT_STATUS_BAR */
    AndroidSystemUiFlags[AndroidSystemUiFlags["LightStatusBar"] = 8192] = "LightStatusBar";
})(AndroidSystemUiFlags || (AndroidSystemUiFlags = {}));
var AndroidFullScreenOriginal = /** @class */ (function (_super) {
    __extends(AndroidFullScreenOriginal, _super);
    function AndroidFullScreenOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AndroidFullScreenOriginal.prototype.isSupported = function () { return cordova(this, "isSupported", {}, arguments); };
    AndroidFullScreenOriginal.prototype.isImmersiveModeSupported = function () { return cordova(this, "isImmersiveModeSupported", {}, arguments); };
    AndroidFullScreenOriginal.prototype.immersiveWidth = function () { return cordova(this, "immersiveWidth", {}, arguments); };
    AndroidFullScreenOriginal.prototype.immersiveHeight = function () { return cordova(this, "immersiveHeight", {}, arguments); };
    AndroidFullScreenOriginal.prototype.leanMode = function () { return cordova(this, "leanMode", {}, arguments); };
    AndroidFullScreenOriginal.prototype.showSystemUI = function () { return cordova(this, "showSystemUI", {}, arguments); };
    AndroidFullScreenOriginal.prototype.showUnderStatusBar = function () { return cordova(this, "showUnderStatusBar", {}, arguments); };
    AndroidFullScreenOriginal.prototype.showUnderSystemUI = function () { return cordova(this, "showUnderSystemUI", {}, arguments); };
    AndroidFullScreenOriginal.prototype.immersiveMode = function () { return cordova(this, "immersiveMode", {}, arguments); };
    AndroidFullScreenOriginal.prototype.setSystemUiVisibility = function (visibility) { return cordova(this, "setSystemUiVisibility", {}, arguments); };
    AndroidFullScreenOriginal.pluginName = "AndroidFullScreen";
    AndroidFullScreenOriginal.plugin = "cordova-plugin-fullscreen";
    AndroidFullScreenOriginal.pluginRef = "AndroidFullScreen";
    AndroidFullScreenOriginal.repo = "https://github.com/mesmotronic/cordova-plugin-fullscreen";
    AndroidFullScreenOriginal.platforms = ["Android"];
    return AndroidFullScreenOriginal;
}(AwesomeCordovaNativePlugin));
var AndroidFullScreen = new AndroidFullScreenOriginal();
export { AndroidFullScreen };
//# sourceMappingURL=data:application/json;base64,