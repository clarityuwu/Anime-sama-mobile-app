// DIRECTIVES
export { BooleanValueAccessorDirective as BooleanValueAccessor } from './directives/control-value-accessors/boolean-value-accessor';
export { NumericValueAccessorDirective as NumericValueAccessor } from './directives/control-value-accessors/numeric-value-accessor';
export { RadioValueAccessorDirective as RadioValueAccessor } from './directives/control-value-accessors/radio-value-accessor';
export { SelectValueAccessorDirective as SelectValueAccessor } from './directives/control-value-accessors/select-value-accessor';
export { TextValueAccessorDirective as TextValueAccessor } from './directives/control-value-accessors/text-value-accessor';
export { IonTabs } from './directives/navigation/ion-tabs';
export { IonBackButton } from './directives/navigation/ion-back-button';
export { IonNav } from './directives/navigation/ion-nav';
export { IonRouterOutlet } from './directives/navigation/ion-router-outlet';
export { RouterLinkDelegateDirective as RouterLinkDelegate, RouterLinkWithHrefDelegateDirective as RouterLinkWithHrefDelegate, } from './directives/navigation/router-link-delegate';
export { IonModal } from './directives/overlays/modal';
export { IonPopover } from './directives/overlays/popover';
export * from './directives/proxies';
export * from './directives/validators';
// PROVIDERS
export { AlertController, LoadingController, PickerController, DomController, NavController, Config, Platform, AngularDelegate, NavParams, IonicRouteStrategy, } from '@ionic/angular/common';
export { AnimationController } from './providers/animation-controller';
export { ActionSheetController } from './providers/action-sheet-controller';
export { GestureController } from './providers/gesture-controller';
export { MenuController } from './providers/menu-controller';
export { ModalController } from './providers/modal-controller';
export { PopoverController } from './providers/popover-controller';
export { ToastController } from './providers/toast-controller';
// PACKAGE MODULE
export { IonicModule } from './ionic-module';
export { 
// UTILS
createAnimation, createGesture, iosTransitionAnimation, mdTransitionAnimation, IonicSlides, getPlatforms, isPlatform, getTimeGivenProgression, getIonPageElement, IonicSafeString, openURL, } from '@ionic/core';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsYUFBYTtBQUNiLE9BQU8sRUFBRSw2QkFBNkIsSUFBSSxvQkFBb0IsRUFBRSxNQUFNLDZEQUE2RCxDQUFDO0FBQ3BJLE9BQU8sRUFBRSw2QkFBNkIsSUFBSSxvQkFBb0IsRUFBRSxNQUFNLDZEQUE2RCxDQUFDO0FBQ3BJLE9BQU8sRUFBRSwyQkFBMkIsSUFBSSxrQkFBa0IsRUFBRSxNQUFNLDJEQUEyRCxDQUFDO0FBQzlILE9BQU8sRUFBRSw0QkFBNEIsSUFBSSxtQkFBbUIsRUFBRSxNQUFNLDREQUE0RCxDQUFDO0FBQ2pJLE9BQU8sRUFBRSwwQkFBMEIsSUFBSSxpQkFBaUIsRUFBRSxNQUFNLDBEQUEwRCxDQUFDO0FBQzNILE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUMzRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0seUNBQXlDLENBQUM7QUFDeEUsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQ3pELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSwyQ0FBMkMsQ0FBQztBQUM1RSxPQUFPLEVBQ0wsMkJBQTJCLElBQUksa0JBQWtCLEVBQ2pELG1DQUFtQyxJQUFJLDBCQUEwQixHQUNsRSxNQUFNLDhDQUE4QyxDQUFDO0FBRXRELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDM0QsY0FBYyxzQkFBc0IsQ0FBQztBQUNyQyxjQUFjLHlCQUF5QixDQUFDO0FBRXhDLFlBQVk7QUFDWixPQUFPLEVBQ0wsZUFBZSxFQUNmLGlCQUFpQixFQUNqQixnQkFBZ0IsRUFDaEIsYUFBYSxFQUNiLGFBQWEsRUFDYixNQUFNLEVBQ04sUUFBUSxFQUNSLGVBQWUsRUFDZixTQUFTLEVBQ1Qsa0JBQWtCLEdBS25CLE1BQU0sdUJBQXVCLENBQUM7QUFDL0IsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDdkUsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFDNUUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDbkUsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQzdELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUMvRCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUNuRSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFFL0QsaUJBQWlCO0FBQ2pCLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUU3QyxPQUFPO0FBQ0wsUUFBUTtBQUNSLGVBQWUsRUFDZixhQUFhLEVBQ2Isc0JBQXNCLEVBQ3RCLHFCQUFxQixFQUNyQixXQUFXLEVBQ1gsWUFBWSxFQUNaLFVBQVUsRUFDVix1QkFBdUIsRUFDdkIsaUJBQWlCLEVBa0NqQixlQUFlLEVBMENmLE9BQU8sR0FDUixNQUFNLGFBQWEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIERJUkVDVElWRVNcbmV4cG9ydCB7IEJvb2xlYW5WYWx1ZUFjY2Vzc29yRGlyZWN0aXZlIGFzIEJvb2xlYW5WYWx1ZUFjY2Vzc29yIH0gZnJvbSAnLi9kaXJlY3RpdmVzL2NvbnRyb2wtdmFsdWUtYWNjZXNzb3JzL2Jvb2xlYW4tdmFsdWUtYWNjZXNzb3InO1xuZXhwb3J0IHsgTnVtZXJpY1ZhbHVlQWNjZXNzb3JEaXJlY3RpdmUgYXMgTnVtZXJpY1ZhbHVlQWNjZXNzb3IgfSBmcm9tICcuL2RpcmVjdGl2ZXMvY29udHJvbC12YWx1ZS1hY2Nlc3NvcnMvbnVtZXJpYy12YWx1ZS1hY2Nlc3Nvcic7XG5leHBvcnQgeyBSYWRpb1ZhbHVlQWNjZXNzb3JEaXJlY3RpdmUgYXMgUmFkaW9WYWx1ZUFjY2Vzc29yIH0gZnJvbSAnLi9kaXJlY3RpdmVzL2NvbnRyb2wtdmFsdWUtYWNjZXNzb3JzL3JhZGlvLXZhbHVlLWFjY2Vzc29yJztcbmV4cG9ydCB7IFNlbGVjdFZhbHVlQWNjZXNzb3JEaXJlY3RpdmUgYXMgU2VsZWN0VmFsdWVBY2Nlc3NvciB9IGZyb20gJy4vZGlyZWN0aXZlcy9jb250cm9sLXZhbHVlLWFjY2Vzc29ycy9zZWxlY3QtdmFsdWUtYWNjZXNzb3InO1xuZXhwb3J0IHsgVGV4dFZhbHVlQWNjZXNzb3JEaXJlY3RpdmUgYXMgVGV4dFZhbHVlQWNjZXNzb3IgfSBmcm9tICcuL2RpcmVjdGl2ZXMvY29udHJvbC12YWx1ZS1hY2Nlc3NvcnMvdGV4dC12YWx1ZS1hY2Nlc3Nvcic7XG5leHBvcnQgeyBJb25UYWJzIH0gZnJvbSAnLi9kaXJlY3RpdmVzL25hdmlnYXRpb24vaW9uLXRhYnMnO1xuZXhwb3J0IHsgSW9uQmFja0J1dHRvbiB9IGZyb20gJy4vZGlyZWN0aXZlcy9uYXZpZ2F0aW9uL2lvbi1iYWNrLWJ1dHRvbic7XG5leHBvcnQgeyBJb25OYXYgfSBmcm9tICcuL2RpcmVjdGl2ZXMvbmF2aWdhdGlvbi9pb24tbmF2JztcbmV4cG9ydCB7IElvblJvdXRlck91dGxldCB9IGZyb20gJy4vZGlyZWN0aXZlcy9uYXZpZ2F0aW9uL2lvbi1yb3V0ZXItb3V0bGV0JztcbmV4cG9ydCB7XG4gIFJvdXRlckxpbmtEZWxlZ2F0ZURpcmVjdGl2ZSBhcyBSb3V0ZXJMaW5rRGVsZWdhdGUsXG4gIFJvdXRlckxpbmtXaXRoSHJlZkRlbGVnYXRlRGlyZWN0aXZlIGFzIFJvdXRlckxpbmtXaXRoSHJlZkRlbGVnYXRlLFxufSBmcm9tICcuL2RpcmVjdGl2ZXMvbmF2aWdhdGlvbi9yb3V0ZXItbGluay1kZWxlZ2F0ZSc7XG5cbmV4cG9ydCB7IElvbk1vZGFsIH0gZnJvbSAnLi9kaXJlY3RpdmVzL292ZXJsYXlzL21vZGFsJztcbmV4cG9ydCB7IElvblBvcG92ZXIgfSBmcm9tICcuL2RpcmVjdGl2ZXMvb3ZlcmxheXMvcG9wb3Zlcic7XG5leHBvcnQgKiBmcm9tICcuL2RpcmVjdGl2ZXMvcHJveGllcyc7XG5leHBvcnQgKiBmcm9tICcuL2RpcmVjdGl2ZXMvdmFsaWRhdG9ycyc7XG5cbi8vIFBST1ZJREVSU1xuZXhwb3J0IHtcbiAgQWxlcnRDb250cm9sbGVyLFxuICBMb2FkaW5nQ29udHJvbGxlcixcbiAgUGlja2VyQ29udHJvbGxlcixcbiAgRG9tQ29udHJvbGxlcixcbiAgTmF2Q29udHJvbGxlcixcbiAgQ29uZmlnLFxuICBQbGF0Zm9ybSxcbiAgQW5ndWxhckRlbGVnYXRlLFxuICBOYXZQYXJhbXMsXG4gIElvbmljUm91dGVTdHJhdGVneSxcbiAgVmlld1dpbGxFbnRlcixcbiAgVmlld1dpbGxMZWF2ZSxcbiAgVmlld0RpZEVudGVyLFxuICBWaWV3RGlkTGVhdmUsXG59IGZyb20gJ0Bpb25pYy9hbmd1bGFyL2NvbW1vbic7XG5leHBvcnQgeyBBbmltYXRpb25Db250cm9sbGVyIH0gZnJvbSAnLi9wcm92aWRlcnMvYW5pbWF0aW9uLWNvbnRyb2xsZXInO1xuZXhwb3J0IHsgQWN0aW9uU2hlZXRDb250cm9sbGVyIH0gZnJvbSAnLi9wcm92aWRlcnMvYWN0aW9uLXNoZWV0LWNvbnRyb2xsZXInO1xuZXhwb3J0IHsgR2VzdHVyZUNvbnRyb2xsZXIgfSBmcm9tICcuL3Byb3ZpZGVycy9nZXN0dXJlLWNvbnRyb2xsZXInO1xuZXhwb3J0IHsgTWVudUNvbnRyb2xsZXIgfSBmcm9tICcuL3Byb3ZpZGVycy9tZW51LWNvbnRyb2xsZXInO1xuZXhwb3J0IHsgTW9kYWxDb250cm9sbGVyIH0gZnJvbSAnLi9wcm92aWRlcnMvbW9kYWwtY29udHJvbGxlcic7XG5leHBvcnQgeyBQb3BvdmVyQ29udHJvbGxlciB9IGZyb20gJy4vcHJvdmlkZXJzL3BvcG92ZXItY29udHJvbGxlcic7XG5leHBvcnQgeyBUb2FzdENvbnRyb2xsZXIgfSBmcm9tICcuL3Byb3ZpZGVycy90b2FzdC1jb250cm9sbGVyJztcblxuLy8gUEFDS0FHRSBNT0RVTEVcbmV4cG9ydCB7IElvbmljTW9kdWxlIH0gZnJvbSAnLi9pb25pYy1tb2R1bGUnO1xuXG5leHBvcnQge1xuICAvLyBVVElMU1xuICBjcmVhdGVBbmltYXRpb24sXG4gIGNyZWF0ZUdlc3R1cmUsXG4gIGlvc1RyYW5zaXRpb25BbmltYXRpb24sXG4gIG1kVHJhbnNpdGlvbkFuaW1hdGlvbixcbiAgSW9uaWNTbGlkZXMsXG4gIGdldFBsYXRmb3JtcyxcbiAgaXNQbGF0Zm9ybSxcbiAgZ2V0VGltZUdpdmVuUHJvZ3Jlc3Npb24sXG4gIGdldElvblBhZ2VFbGVtZW50LFxuICAvLyBUWVBFU1xuICBBbmltYXRpb24sXG4gIEFuaW1hdGlvbkJ1aWxkZXIsXG4gIEFuaW1hdGlvbkNhbGxiYWNrT3B0aW9ucyxcbiAgQW5pbWF0aW9uRGlyZWN0aW9uLFxuICBBbmltYXRpb25GaWxsLFxuICBBbmltYXRpb25LZXlGcmFtZXMsXG4gIEFuaW1hdGlvbkxpZmVjeWNsZSxcbiAgR2VzdHVyZSxcbiAgR2VzdHVyZUNvbmZpZyxcbiAgR2VzdHVyZURldGFpbCxcbiAgTmF2Q29tcG9uZW50V2l0aFByb3BzLFxuICBTcGlubmVyVHlwZXMsXG4gIEFjY29yZGlvbkdyb3VwQ3VzdG9tRXZlbnQsXG4gIEFjY29yZGlvbkdyb3VwQ2hhbmdlRXZlbnREZXRhaWwsXG4gIEJyZWFkY3J1bWJDdXN0b21FdmVudCxcbiAgQnJlYWRjcnVtYkNvbGxhcHNlZENsaWNrRXZlbnREZXRhaWwsXG4gIEFjdGlvblNoZWV0T3B0aW9ucyxcbiAgQWN0aW9uU2hlZXRCdXR0b24sXG4gIEFsZXJ0T3B0aW9ucyxcbiAgQWxlcnRJbnB1dCxcbiAgQWxlcnRCdXR0b24sXG4gIEJhY2tCdXR0b25FdmVudCxcbiAgQ2hlY2tib3hDdXN0b21FdmVudCxcbiAgQ2hlY2tib3hDaGFuZ2VFdmVudERldGFpbCxcbiAgRGF0ZXRpbWVDdXN0b21FdmVudCxcbiAgRGF0ZXRpbWVDaGFuZ2VFdmVudERldGFpbCxcbiAgSW5maW5pdGVTY3JvbGxDdXN0b21FdmVudCxcbiAgSW5wdXRDdXN0b21FdmVudCxcbiAgSW5wdXRDaGFuZ2VFdmVudERldGFpbCxcbiAgSXRlbVJlb3JkZXJFdmVudERldGFpbCxcbiAgSXRlbVJlb3JkZXJDdXN0b21FdmVudCxcbiAgSXRlbVNsaWRpbmdDdXN0b21FdmVudCxcbiAgSW9uaWNTYWZlU3RyaW5nLFxuICBMb2FkaW5nT3B0aW9ucyxcbiAgTWVudUN1c3RvbUV2ZW50LFxuICBNb2RhbE9wdGlvbnMsXG4gIE5hdkN1c3RvbUV2ZW50LFxuICBQaWNrZXJPcHRpb25zLFxuICBQaWNrZXJCdXR0b24sXG4gIFBpY2tlckNvbHVtbixcbiAgUGlja2VyQ29sdW1uT3B0aW9uLFxuICBQbGF0Zm9ybUNvbmZpZyxcbiAgUG9wb3Zlck9wdGlvbnMsXG4gIFJhZGlvR3JvdXBDdXN0b21FdmVudCxcbiAgUmFkaW9Hcm91cENoYW5nZUV2ZW50RGV0YWlsLFxuICBSYW5nZUN1c3RvbUV2ZW50LFxuICBSYW5nZUNoYW5nZUV2ZW50RGV0YWlsLFxuICBSYW5nZUtub2JNb3ZlU3RhcnRFdmVudERldGFpbCxcbiAgUmFuZ2VLbm9iTW92ZUVuZEV2ZW50RGV0YWlsLFxuICBSZWZyZXNoZXJDdXN0b21FdmVudCxcbiAgUmVmcmVzaGVyRXZlbnREZXRhaWwsXG4gIFJvdXRlckV2ZW50RGV0YWlsLFxuICBSb3V0ZXJDdXN0b21FdmVudCxcbiAgU2Nyb2xsQmFzZUN1c3RvbUV2ZW50LFxuICBTY3JvbGxCYXNlRGV0YWlsLFxuICBTY3JvbGxEZXRhaWwsXG4gIFNjcm9sbEN1c3RvbUV2ZW50LFxuICBTZWFyY2hiYXJDdXN0b21FdmVudCxcbiAgU2VhcmNoYmFyQ2hhbmdlRXZlbnREZXRhaWwsXG4gIFNlYXJjaGJhcklucHV0RXZlbnREZXRhaWwsXG4gIFNlZ21lbnRDaGFuZ2VFdmVudERldGFpbCxcbiAgU2VnbWVudEN1c3RvbUV2ZW50LFxuICBTZWdtZW50VmFsdWUsXG4gIFNlbGVjdENoYW5nZUV2ZW50RGV0YWlsLFxuICBTZWxlY3RDdXN0b21FdmVudCxcbiAgVGFic0N1c3RvbUV2ZW50LFxuICBUZXh0YXJlYUNoYW5nZUV2ZW50RGV0YWlsLFxuICBUZXh0YXJlYUN1c3RvbUV2ZW50LFxuICBUb2FzdE9wdGlvbnMsXG4gIFRvYXN0QnV0dG9uLFxuICBUb2FzdExheW91dCxcbiAgVG9nZ2xlQ2hhbmdlRXZlbnREZXRhaWwsXG4gIFRvZ2dsZUN1c3RvbUV2ZW50LFxuICBUcmFuc2l0aW9uT3B0aW9ucyxcbiAgb3BlblVSTCxcbn0gZnJvbSAnQGlvbmljL2NvcmUnO1xuIl19