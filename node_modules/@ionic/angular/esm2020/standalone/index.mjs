export { IonBackButton } from './navigation/back-button';
export { IonModal } from './overlays/modal';
export { IonPopover } from './overlays/popover';
export { IonRouterOutlet } from './navigation/router-outlet';
export { IonRouterLink, IonRouterLinkWithHref } from './navigation/router-link-delegate';
export { IonTabs } from './navigation/tabs';
export { provideIonicAngular } from './providers/ionic-angular';
export { ActionSheetController } from './providers/action-sheet-controller';
export { AnimationController } from './providers/animation-controller';
export { GestureController } from './providers/gesture-controller';
export { MenuController } from './providers/menu-controller';
export { ModalController } from './providers/modal-controller';
export { PopoverController } from './providers/popover-controller';
export { ToastController } from './providers/toast-controller';
export { AlertController, LoadingController, PickerController, DomController, NavController, Config, Platform, NavParams, IonicRouteStrategy, } from '@ionic/angular/common';
export { IonNav } from './navigation/nav';
export { IonCheckbox, IonDatetime, IonInput, IonIcon, IonRadioGroup, IonRadio, IonRange, IonSearchbar, IonSegment, IonSelect, IonTextarea, IonToggle, } from './directives';
export * from './directives/proxies';
export { 
// UTILS
createAnimation, createGesture, iosTransitionAnimation, mdTransitionAnimation, IonicSlides, getPlatforms, isPlatform, getTimeGivenProgression, IonicSafeString, } from '@ionic/core/components';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zdGFuZGFsb25lL3NyYy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDekQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQzVDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNoRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDN0QsT0FBTyxFQUFFLGFBQWEsRUFBRSxxQkFBcUIsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQ3pGLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUM1QyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUNoRSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQUM1RSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUN2RSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUNuRSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDN0QsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQy9ELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ25FLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUMvRCxPQUFPLEVBQ0wsZUFBZSxFQUNmLGlCQUFpQixFQUNqQixnQkFBZ0IsRUFDaEIsYUFBYSxFQUNiLGFBQWEsRUFDYixNQUFNLEVBQ04sUUFBUSxFQUNSLFNBQVMsRUFDVCxrQkFBa0IsR0FLbkIsTUFBTSx1QkFBdUIsQ0FBQztBQUMvQixPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDMUMsT0FBTyxFQUNMLFdBQVcsRUFDWCxXQUFXLEVBQ1gsUUFBUSxFQUNSLE9BQU8sRUFDUCxhQUFhLEVBQ2IsUUFBUSxFQUNSLFFBQVEsRUFDUixZQUFZLEVBQ1osVUFBVSxFQUNWLFNBQVMsRUFDVCxXQUFXLEVBQ1gsU0FBUyxHQUNWLE1BQU0sY0FBYyxDQUFDO0FBQ3RCLGNBQWMsc0JBQXNCLENBQUM7QUFFckMsT0FBTztBQUNMLFFBQVE7QUFDUixlQUFlLEVBQ2YsYUFBYSxFQUNiLHNCQUFzQixFQUN0QixxQkFBcUIsRUFDckIsV0FBVyxFQUNYLFlBQVksRUFDWixVQUFVLEVBQ1YsdUJBQXVCLEVBa0N2QixlQUFlLEdBeUNoQixNQUFNLHdCQUF3QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHsgSW9uQmFja0J1dHRvbiB9IGZyb20gJy4vbmF2aWdhdGlvbi9iYWNrLWJ1dHRvbic7XG5leHBvcnQgeyBJb25Nb2RhbCB9IGZyb20gJy4vb3ZlcmxheXMvbW9kYWwnO1xuZXhwb3J0IHsgSW9uUG9wb3ZlciB9IGZyb20gJy4vb3ZlcmxheXMvcG9wb3Zlcic7XG5leHBvcnQgeyBJb25Sb3V0ZXJPdXRsZXQgfSBmcm9tICcuL25hdmlnYXRpb24vcm91dGVyLW91dGxldCc7XG5leHBvcnQgeyBJb25Sb3V0ZXJMaW5rLCBJb25Sb3V0ZXJMaW5rV2l0aEhyZWYgfSBmcm9tICcuL25hdmlnYXRpb24vcm91dGVyLWxpbmstZGVsZWdhdGUnO1xuZXhwb3J0IHsgSW9uVGFicyB9IGZyb20gJy4vbmF2aWdhdGlvbi90YWJzJztcbmV4cG9ydCB7IHByb3ZpZGVJb25pY0FuZ3VsYXIgfSBmcm9tICcuL3Byb3ZpZGVycy9pb25pYy1hbmd1bGFyJztcbmV4cG9ydCB7IEFjdGlvblNoZWV0Q29udHJvbGxlciB9IGZyb20gJy4vcHJvdmlkZXJzL2FjdGlvbi1zaGVldC1jb250cm9sbGVyJztcbmV4cG9ydCB7IEFuaW1hdGlvbkNvbnRyb2xsZXIgfSBmcm9tICcuL3Byb3ZpZGVycy9hbmltYXRpb24tY29udHJvbGxlcic7XG5leHBvcnQgeyBHZXN0dXJlQ29udHJvbGxlciB9IGZyb20gJy4vcHJvdmlkZXJzL2dlc3R1cmUtY29udHJvbGxlcic7XG5leHBvcnQgeyBNZW51Q29udHJvbGxlciB9IGZyb20gJy4vcHJvdmlkZXJzL21lbnUtY29udHJvbGxlcic7XG5leHBvcnQgeyBNb2RhbENvbnRyb2xsZXIgfSBmcm9tICcuL3Byb3ZpZGVycy9tb2RhbC1jb250cm9sbGVyJztcbmV4cG9ydCB7IFBvcG92ZXJDb250cm9sbGVyIH0gZnJvbSAnLi9wcm92aWRlcnMvcG9wb3Zlci1jb250cm9sbGVyJztcbmV4cG9ydCB7IFRvYXN0Q29udHJvbGxlciB9IGZyb20gJy4vcHJvdmlkZXJzL3RvYXN0LWNvbnRyb2xsZXInO1xuZXhwb3J0IHtcbiAgQWxlcnRDb250cm9sbGVyLFxuICBMb2FkaW5nQ29udHJvbGxlcixcbiAgUGlja2VyQ29udHJvbGxlcixcbiAgRG9tQ29udHJvbGxlcixcbiAgTmF2Q29udHJvbGxlcixcbiAgQ29uZmlnLFxuICBQbGF0Zm9ybSxcbiAgTmF2UGFyYW1zLFxuICBJb25pY1JvdXRlU3RyYXRlZ3ksXG4gIFZpZXdXaWxsRW50ZXIsXG4gIFZpZXdEaWRFbnRlcixcbiAgVmlld1dpbGxMZWF2ZSxcbiAgVmlld0RpZExlYXZlLFxufSBmcm9tICdAaW9uaWMvYW5ndWxhci9jb21tb24nO1xuZXhwb3J0IHsgSW9uTmF2IH0gZnJvbSAnLi9uYXZpZ2F0aW9uL25hdic7XG5leHBvcnQge1xuICBJb25DaGVja2JveCxcbiAgSW9uRGF0ZXRpbWUsXG4gIElvbklucHV0LFxuICBJb25JY29uLFxuICBJb25SYWRpb0dyb3VwLFxuICBJb25SYWRpbyxcbiAgSW9uUmFuZ2UsXG4gIElvblNlYXJjaGJhcixcbiAgSW9uU2VnbWVudCxcbiAgSW9uU2VsZWN0LFxuICBJb25UZXh0YXJlYSxcbiAgSW9uVG9nZ2xlLFxufSBmcm9tICcuL2RpcmVjdGl2ZXMnO1xuZXhwb3J0ICogZnJvbSAnLi9kaXJlY3RpdmVzL3Byb3hpZXMnO1xuXG5leHBvcnQge1xuICAvLyBVVElMU1xuICBjcmVhdGVBbmltYXRpb24sXG4gIGNyZWF0ZUdlc3R1cmUsXG4gIGlvc1RyYW5zaXRpb25BbmltYXRpb24sXG4gIG1kVHJhbnNpdGlvbkFuaW1hdGlvbixcbiAgSW9uaWNTbGlkZXMsXG4gIGdldFBsYXRmb3JtcyxcbiAgaXNQbGF0Zm9ybSxcbiAgZ2V0VGltZUdpdmVuUHJvZ3Jlc3Npb24sXG4gIC8vIFRZUEVTXG4gIEFuaW1hdGlvbixcbiAgQW5pbWF0aW9uQnVpbGRlcixcbiAgQW5pbWF0aW9uQ2FsbGJhY2tPcHRpb25zLFxuICBBbmltYXRpb25EaXJlY3Rpb24sXG4gIEFuaW1hdGlvbkZpbGwsXG4gIEFuaW1hdGlvbktleUZyYW1lcyxcbiAgQW5pbWF0aW9uTGlmZWN5Y2xlLFxuICBHZXN0dXJlLFxuICBHZXN0dXJlQ29uZmlnLFxuICBHZXN0dXJlRGV0YWlsLFxuICBOYXZDb21wb25lbnRXaXRoUHJvcHMsXG4gIFNwaW5uZXJUeXBlcyxcbiAgQWNjb3JkaW9uR3JvdXBDdXN0b21FdmVudCxcbiAgQWNjb3JkaW9uR3JvdXBDaGFuZ2VFdmVudERldGFpbCxcbiAgQnJlYWRjcnVtYkN1c3RvbUV2ZW50LFxuICBCcmVhZGNydW1iQ29sbGFwc2VkQ2xpY2tFdmVudERldGFpbCxcbiAgQWN0aW9uU2hlZXRPcHRpb25zLFxuICBBY3Rpb25TaGVldEJ1dHRvbixcbiAgQWxlcnRPcHRpb25zLFxuICBBbGVydElucHV0LFxuICBBbGVydEJ1dHRvbixcbiAgQmFja0J1dHRvbkV2ZW50LFxuICBDaGVja2JveEN1c3RvbUV2ZW50LFxuICBDaGVja2JveENoYW5nZUV2ZW50RGV0YWlsLFxuICBEYXRldGltZUN1c3RvbUV2ZW50LFxuICBEYXRldGltZUNoYW5nZUV2ZW50RGV0YWlsLFxuICBJbmZpbml0ZVNjcm9sbEN1c3RvbUV2ZW50LFxuICBJbnB1dEN1c3RvbUV2ZW50LFxuICBJbnB1dENoYW5nZUV2ZW50RGV0YWlsLFxuICBJdGVtUmVvcmRlckV2ZW50RGV0YWlsLFxuICBJdGVtUmVvcmRlckN1c3RvbUV2ZW50LFxuICBJdGVtU2xpZGluZ0N1c3RvbUV2ZW50LFxuICBJb25pY1NhZmVTdHJpbmcsXG4gIExvYWRpbmdPcHRpb25zLFxuICBNZW51Q3VzdG9tRXZlbnQsXG4gIE1vZGFsT3B0aW9ucyxcbiAgTmF2Q3VzdG9tRXZlbnQsXG4gIFBpY2tlck9wdGlvbnMsXG4gIFBpY2tlckJ1dHRvbixcbiAgUGlja2VyQ29sdW1uLFxuICBQaWNrZXJDb2x1bW5PcHRpb24sXG4gIFBsYXRmb3JtQ29uZmlnLFxuICBQb3BvdmVyT3B0aW9ucyxcbiAgUmFkaW9Hcm91cEN1c3RvbUV2ZW50LFxuICBSYWRpb0dyb3VwQ2hhbmdlRXZlbnREZXRhaWwsXG4gIFJhbmdlQ3VzdG9tRXZlbnQsXG4gIFJhbmdlQ2hhbmdlRXZlbnREZXRhaWwsXG4gIFJhbmdlS25vYk1vdmVTdGFydEV2ZW50RGV0YWlsLFxuICBSYW5nZUtub2JNb3ZlRW5kRXZlbnREZXRhaWwsXG4gIFJlZnJlc2hlckN1c3RvbUV2ZW50LFxuICBSZWZyZXNoZXJFdmVudERldGFpbCxcbiAgUm91dGVyRXZlbnREZXRhaWwsXG4gIFJvdXRlckN1c3RvbUV2ZW50LFxuICBTY3JvbGxCYXNlQ3VzdG9tRXZlbnQsXG4gIFNjcm9sbEJhc2VEZXRhaWwsXG4gIFNjcm9sbERldGFpbCxcbiAgU2Nyb2xsQ3VzdG9tRXZlbnQsXG4gIFNlYXJjaGJhckN1c3RvbUV2ZW50LFxuICBTZWFyY2hiYXJDaGFuZ2VFdmVudERldGFpbCxcbiAgU2VhcmNoYmFySW5wdXRFdmVudERldGFpbCxcbiAgU2VnbWVudENoYW5nZUV2ZW50RGV0YWlsLFxuICBTZWdtZW50Q3VzdG9tRXZlbnQsXG4gIFNlZ21lbnRWYWx1ZSxcbiAgU2VsZWN0Q2hhbmdlRXZlbnREZXRhaWwsXG4gIFNlbGVjdEN1c3RvbUV2ZW50LFxuICBUYWJzQ3VzdG9tRXZlbnQsXG4gIFRleHRhcmVhQ2hhbmdlRXZlbnREZXRhaWwsXG4gIFRleHRhcmVhQ3VzdG9tRXZlbnQsXG4gIFRvYXN0T3B0aW9ucyxcbiAgVG9hc3RCdXR0b24sXG4gIFRvYXN0TGF5b3V0LFxuICBUb2dnbGVDaGFuZ2VFdmVudERldGFpbCxcbiAgVG9nZ2xlQ3VzdG9tRXZlbnQsXG59IGZyb20gJ0Bpb25pYy9jb3JlL2NvbXBvbmVudHMnO1xuIl19