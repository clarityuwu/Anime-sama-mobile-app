{"ast":null,"code":"/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { w as win } from './index-7a14ecec.js';\nimport { r as raf } from './helpers-3379ba19.js';\nimport { a as printIonError } from './index-595d62c9.js';\n\n/**\n * Used to update a scoped component that uses emulated slots. This fires when\n * content is passed into the slot or when the content inside of a slot changes.\n * This is not needed for components using native slots in the Shadow DOM.\n * @internal\n * @param el The host element to observe\n * @param slotName mutationCallback will fire when nodes on this slot change\n * @param mutationCallback The callback to fire whenever the slotted content changes\n */\nconst createSlotMutationController = (el, slotName, mutationCallback) => {\n  let hostMutationObserver;\n  let slottedContentMutationObserver;\n  if (win !== undefined && 'MutationObserver' in win) {\n    hostMutationObserver = new MutationObserver(entries => {\n      for (const entry of entries) {\n        for (const node of entry.addedNodes) {\n          /**\n           * Check to see if the added node\n           *  is our slotted content.\n           */\n          if (node.nodeType === Node.ELEMENT_NODE && node.slot === slotName) {\n            /**\n             * If so, we want to watch the slotted\n             * content itself for changes. This lets us\n             * detect when content inside of the slot changes.\n             */\n            mutationCallback();\n            /**\n             * Adding the listener in an raf\n             * waits until Stencil moves the slotted element\n             * into the correct place in the event that\n             * slotted content is being added.\n             */\n            raf(() => watchForSlotChange(node));\n            return;\n          }\n        }\n      }\n    });\n    hostMutationObserver.observe(el, {\n      childList: true\n    });\n  }\n  /**\n   * Listen for changes inside of the slotted content.\n   * We can listen for subtree changes here to be\n   * informed of text within the slotted content\n   * changing. Doing this on the host is possible\n   * but it is much more expensive to do because\n   * it also listens for changes to the internals\n   * of the component.\n   */\n  const watchForSlotChange = slottedEl => {\n    var _a;\n    if (slottedContentMutationObserver) {\n      slottedContentMutationObserver.disconnect();\n      slottedContentMutationObserver = undefined;\n    }\n    slottedContentMutationObserver = new MutationObserver(entries => {\n      mutationCallback();\n      for (const entry of entries) {\n        for (const node of entry.removedNodes) {\n          /**\n           * If the element was removed then we\n           * need to destroy the MutationObserver\n           * so the element can be garbage collected.\n           */\n          if (node.nodeType === Node.ELEMENT_NODE && node.slot === slotName) {\n            destroySlottedContentObserver();\n          }\n        }\n      }\n    });\n    /**\n     * Listen for changes inside of the element\n     * as well as anything deep in the tree.\n     * We listen on the parentElement so that we can\n     * detect when slotted element itself is removed.\n     */\n    slottedContentMutationObserver.observe((_a = slottedEl.parentElement) !== null && _a !== void 0 ? _a : slottedEl, {\n      subtree: true,\n      childList: true\n    });\n  };\n  const destroy = () => {\n    if (hostMutationObserver) {\n      hostMutationObserver.disconnect();\n      hostMutationObserver = undefined;\n    }\n    destroySlottedContentObserver();\n  };\n  const destroySlottedContentObserver = () => {\n    if (slottedContentMutationObserver) {\n      slottedContentMutationObserver.disconnect();\n      slottedContentMutationObserver = undefined;\n    }\n  };\n  return {\n    destroy\n  };\n};\nconst getCounterText = (value, maxLength, counterFormatter) => {\n  const valueLength = value == null ? 0 : value.toString().length;\n  const defaultCounterText = defaultCounterFormatter(valueLength, maxLength);\n  /**\n   * If developers did not pass a custom formatter,\n   * use the default one.\n   */\n  if (counterFormatter === undefined) {\n    return defaultCounterText;\n  }\n  /**\n   * Otherwise, try to use the custom formatter\n   * and fallback to the default formatter if\n   * there was an error.\n   */\n  try {\n    return counterFormatter(valueLength, maxLength);\n  } catch (e) {\n    printIonError('Exception in provided `counterFormatter`.', e);\n    return defaultCounterText;\n  }\n};\nconst defaultCounterFormatter = (length, maxlength) => {\n  return `${length} / ${maxlength}`;\n};\nexport { createSlotMutationController as c, getCounterText as g };","map":{"version":3,"names":["w","win","r","raf","a","printIonError","createSlotMutationController","el","slotName","mutationCallback","hostMutationObserver","slottedContentMutationObserver","undefined","MutationObserver","entries","entry","node","addedNodes","nodeType","Node","ELEMENT_NODE","slot","watchForSlotChange","observe","childList","slottedEl","_a","disconnect","removedNodes","destroySlottedContentObserver","parentElement","subtree","destroy","getCounterText","value","maxLength","counterFormatter","valueLength","toString","length","defaultCounterText","defaultCounterFormatter","e","maxlength","c","g"],"sources":["/Users/raphaelboullay/Documents/GitHub/Anime-sama-mobile-app/node_modules/@ionic/core/dist/esm/input.utils-ec063df4.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { w as win } from './index-7a14ecec.js';\nimport { r as raf } from './helpers-3379ba19.js';\nimport { a as printIonError } from './index-595d62c9.js';\n\n/**\n * Used to update a scoped component that uses emulated slots. This fires when\n * content is passed into the slot or when the content inside of a slot changes.\n * This is not needed for components using native slots in the Shadow DOM.\n * @internal\n * @param el The host element to observe\n * @param slotName mutationCallback will fire when nodes on this slot change\n * @param mutationCallback The callback to fire whenever the slotted content changes\n */\nconst createSlotMutationController = (el, slotName, mutationCallback) => {\n  let hostMutationObserver;\n  let slottedContentMutationObserver;\n  if (win !== undefined && 'MutationObserver' in win) {\n    hostMutationObserver = new MutationObserver((entries) => {\n      for (const entry of entries) {\n        for (const node of entry.addedNodes) {\n          /**\n           * Check to see if the added node\n           *  is our slotted content.\n           */\n          if (node.nodeType === Node.ELEMENT_NODE && node.slot === slotName) {\n            /**\n             * If so, we want to watch the slotted\n             * content itself for changes. This lets us\n             * detect when content inside of the slot changes.\n             */\n            mutationCallback();\n            /**\n             * Adding the listener in an raf\n             * waits until Stencil moves the slotted element\n             * into the correct place in the event that\n             * slotted content is being added.\n             */\n            raf(() => watchForSlotChange(node));\n            return;\n          }\n        }\n      }\n    });\n    hostMutationObserver.observe(el, {\n      childList: true,\n    });\n  }\n  /**\n   * Listen for changes inside of the slotted content.\n   * We can listen for subtree changes here to be\n   * informed of text within the slotted content\n   * changing. Doing this on the host is possible\n   * but it is much more expensive to do because\n   * it also listens for changes to the internals\n   * of the component.\n   */\n  const watchForSlotChange = (slottedEl) => {\n    var _a;\n    if (slottedContentMutationObserver) {\n      slottedContentMutationObserver.disconnect();\n      slottedContentMutationObserver = undefined;\n    }\n    slottedContentMutationObserver = new MutationObserver((entries) => {\n      mutationCallback();\n      for (const entry of entries) {\n        for (const node of entry.removedNodes) {\n          /**\n           * If the element was removed then we\n           * need to destroy the MutationObserver\n           * so the element can be garbage collected.\n           */\n          if (node.nodeType === Node.ELEMENT_NODE && node.slot === slotName) {\n            destroySlottedContentObserver();\n          }\n        }\n      }\n    });\n    /**\n     * Listen for changes inside of the element\n     * as well as anything deep in the tree.\n     * We listen on the parentElement so that we can\n     * detect when slotted element itself is removed.\n     */\n    slottedContentMutationObserver.observe((_a = slottedEl.parentElement) !== null && _a !== void 0 ? _a : slottedEl, { subtree: true, childList: true });\n  };\n  const destroy = () => {\n    if (hostMutationObserver) {\n      hostMutationObserver.disconnect();\n      hostMutationObserver = undefined;\n    }\n    destroySlottedContentObserver();\n  };\n  const destroySlottedContentObserver = () => {\n    if (slottedContentMutationObserver) {\n      slottedContentMutationObserver.disconnect();\n      slottedContentMutationObserver = undefined;\n    }\n  };\n  return {\n    destroy,\n  };\n};\n\nconst getCounterText = (value, maxLength, counterFormatter) => {\n  const valueLength = value == null ? 0 : value.toString().length;\n  const defaultCounterText = defaultCounterFormatter(valueLength, maxLength);\n  /**\n   * If developers did not pass a custom formatter,\n   * use the default one.\n   */\n  if (counterFormatter === undefined) {\n    return defaultCounterText;\n  }\n  /**\n   * Otherwise, try to use the custom formatter\n   * and fallback to the default formatter if\n   * there was an error.\n   */\n  try {\n    return counterFormatter(valueLength, maxLength);\n  }\n  catch (e) {\n    printIonError('Exception in provided `counterFormatter`.', e);\n    return defaultCounterText;\n  }\n};\nconst defaultCounterFormatter = (length, maxlength) => {\n  return `${length} / ${maxlength}`;\n};\n\nexport { createSlotMutationController as c, getCounterText as g };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}