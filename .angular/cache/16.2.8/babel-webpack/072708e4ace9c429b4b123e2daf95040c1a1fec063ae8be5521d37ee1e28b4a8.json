{"ast":null,"code":"import _asyncToGenerator from \"/Users/raphaelboullay/Documents/GitHub/Anime-sama-mobile-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { PushNotifications } from '@capacitor/push-notifications';\nlet HomePage = class HomePage {\n  constructor() {\n    this.createNotificationChannel = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (animeName) {\n        // Create a notification channel for the anime.\n        const channel = {\n          id: animeName,\n          name: animeName,\n          description: `Notifications for the anime ${animeName}.`\n        };\n        yield PushNotifications.createChannel(channel);\n      });\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n  }\n  ngOnInit() {\n    PushNotifications.requestPermissions().then(result => {\n      if (result.receive === 'granted') {\n        PushNotifications.register();\n      } else {\n        console.error('Permission not granted');\n      }\n    });\n    console.log('Initializing HomePage');\n    PushNotifications.addListener('registration', token => {\n      console.log('Push registration success, token: ' + token.value);\n    });\n    PushNotifications.addListener('registrationError', error => {\n      alert('Error on registration: ' + JSON.stringify(error));\n    });\n    PushNotifications.addListener('pushNotificationReceived', notification => {\n      alert('Push received: ' + JSON.stringify(notification));\n    });\n    PushNotifications.addListener('pushNotificationActionPerformed', notification => {\n      alert('Push action performed: ' + JSON.stringify(notification));\n    });\n  }\n  goToMainPage() {\n    const iframe = document.getElementById('myIframe');\n    if (iframe) {\n      iframe.src = 'https://anime-sama.fr';\n    }\n  }\n  goToReleasedPage() {\n    const iframe = document.getElementById('myIframe');\n    if (iframe) {\n      iframe.src = 'https://anime-sama.fr/planning/';\n    }\n  }\n  addToNotification() {\n    const iframe = document.getElementById('myIframe');\n    if (iframe) {\n      const iframeSrc = iframe.src;\n      if (iframeSrc) {\n        console.log(iframeSrc);\n        const animeName = iframeSrc.split('/')[3];\n        console.log(animeName);\n        this.createNotificationChannel(animeName);\n        PushNotifications.register();\n        alert(`You have been subscribed to notifications for the anime ${animeName}. You will receive notifications when new episodes are released.`);\n      }\n    }\n  }\n};\nHomePage = __decorate([Component({\n  selector: 'app-home',\n  templateUrl: 'home.page.html',\n  styleUrls: ['home.page.scss']\n})], HomePage);\nexport { HomePage };","map":{"version":3,"names":["Component","PushNotifications","HomePage","constructor","createNotificationChannel","_ref","_asyncToGenerator","animeName","channel","id","name","description","createChannel","_x","apply","arguments","ngOnInit","requestPermissions","then","result","receive","register","console","error","log","addListener","token","value","alert","JSON","stringify","notification","goToMainPage","iframe","document","getElementById","src","goToReleasedPage","addToNotification","iframeSrc","split","__decorate","selector","templateUrl","styleUrls"],"sources":["/Users/raphaelboullay/Documents/GitHub/Anime-sama-mobile-app/src/app/home/home.page.ts"],"sourcesContent":["import { Component, OnInit} from '@angular/core';\nimport {\n  ActionPerformed,\n  PushNotificationSchema,\n  PushNotifications,\n  Token,\n} from '@capacitor/push-notifications';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: 'home.page.html',\n  styleUrls: ['home.page.scss'],\n})\n\nexport class HomePage implements OnInit {\n\n  ngOnInit() {\n    PushNotifications.requestPermissions().then(result => {\n      if (result.receive === 'granted') {\n        PushNotifications.register();\n      } else {\n        console.error('Permission not granted');\n      }\n    });\n    \n    console.log('Initializing HomePage');\n\n    PushNotifications.addListener('registration', (token: Token) => {\n      console.log('Push registration success, token: ' + token.value);\n    });\n\n    PushNotifications.addListener('registrationError', (error: any) => {\n      alert('Error on registration: ' + JSON.stringify(error));\n    });\n\n    PushNotifications.addListener(\n      'pushNotificationReceived',\n      (notification: PushNotificationSchema) => {\n        alert('Push received: ' + JSON.stringify(notification));\n      },\n    );\n\n    PushNotifications.addListener(\n      'pushNotificationActionPerformed',\n      (notification: ActionPerformed) => {\n        alert('Push action performed: ' + JSON.stringify(notification));\n      },\n    );\n  }\n\n  createNotificationChannel = async (animeName: string) => {\n  // Create a notification channel for the anime.\n    const channel = {\n      id: animeName,\n      name: animeName,\n      description: `Notifications for the anime ${animeName}.`,\n    };\n    await PushNotifications.createChannel(channel);\n  };\n  \n  goToMainPage() {\n    const iframe = document.getElementById('myIframe') as HTMLIFrameElement;\n    if (iframe) {\n      iframe.src = 'https://anime-sama.fr';\n    }\n  }\n\n  goToReleasedPage() {\n    const iframe = document.getElementById('myIframe') as HTMLIFrameElement;\n    if (iframe) {\n      iframe.src = 'https://anime-sama.fr/planning/';\n    }\n  }\n\n  addToNotification() {\n    const iframe = document.getElementById('myIframe') as HTMLIFrameElement;\n    if (iframe) {\n      const iframeSrc = iframe.src;\n      if (iframeSrc) {\n        console.log(iframeSrc)\n        const animeName = iframeSrc.split('/')[3];\n  \n        console.log(animeName)\n        this.createNotificationChannel(animeName);\n        PushNotifications.register();\n        alert(`You have been subscribed to notifications for the anime ${animeName}. You will receive notifications when new episodes are released.`);\n    }\n  }\n}\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}