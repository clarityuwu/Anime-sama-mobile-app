{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/clq/Documents/GitHub/Anime-sama-mobile-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { r as registerInstance, d as createEvent, h, H as Host, f as getElement } from './index-b49b173c.js';\nimport { E as ENABLE_HTML_CONTENT_DEFAULT, a as sanitizeDOMString } from './config-96c9ace3.js';\nimport { g as getElementRoot, r as raf } from './helpers-3379ba19.js';\nimport { c as createLockController } from './lock-controller-e8c6c051.js';\nimport { p as printIonWarning } from './index-595d62c9.js';\nimport { d as createDelegateController, e as createTriggerController, i as isCancel, j as prepareOverlay, k as setOverlayId, f as present, g as dismiss, h as eventMethod, s as safeCall } from './overlays-cec6bac8.js';\nimport { g as getClassMap, c as createColorClasses } from './theme-17531cdf.js';\nimport { c as config, b as getIonMode } from './ionic-global-246ca78f.js';\nimport { c as createAnimation } from './animation-8aa13916.js';\nimport { w as win } from './index-7a14ecec.js';\nimport './framework-delegate-aa433dea.js';\nimport './hardware-back-button-39299f84.js';\n\n/**\n * iOS Toast Enter Animation\n */\nconst iosEnterAnimation = (baseEl, opts) => {\n  const baseAnimation = createAnimation();\n  const wrapperAnimation = createAnimation();\n  const {\n    position,\n    top,\n    bottom\n  } = opts;\n  const root = getElementRoot(baseEl);\n  const wrapperEl = root.querySelector('.toast-wrapper');\n  wrapperAnimation.addElement(wrapperEl);\n  switch (position) {\n    case 'top':\n      wrapperAnimation.fromTo('transform', 'translateY(-100%)', `translateY(${top})`);\n      break;\n    case 'middle':\n      const topPosition = Math.floor(baseEl.clientHeight / 2 - wrapperEl.clientHeight / 2);\n      wrapperEl.style.top = `${topPosition}px`;\n      wrapperAnimation.fromTo('opacity', 0.01, 1);\n      break;\n    default:\n      wrapperAnimation.fromTo('transform', 'translateY(100%)', `translateY(${bottom})`);\n      break;\n  }\n  return baseAnimation.easing('cubic-bezier(.155,1.105,.295,1.12)').duration(400).addAnimation(wrapperAnimation);\n};\n\n/**\n * iOS Toast Leave Animation\n */\nconst iosLeaveAnimation = (baseEl, opts) => {\n  const baseAnimation = createAnimation();\n  const wrapperAnimation = createAnimation();\n  const {\n    position,\n    top,\n    bottom\n  } = opts;\n  const root = getElementRoot(baseEl);\n  const wrapperEl = root.querySelector('.toast-wrapper');\n  wrapperAnimation.addElement(wrapperEl);\n  switch (position) {\n    case 'top':\n      wrapperAnimation.fromTo('transform', `translateY(${top})`, 'translateY(-100%)');\n      break;\n    case 'middle':\n      wrapperAnimation.fromTo('opacity', 0.99, 0);\n      break;\n    default:\n      wrapperAnimation.fromTo('transform', `translateY(${bottom})`, 'translateY(100%)');\n      break;\n  }\n  return baseAnimation.easing('cubic-bezier(.36,.66,.04,1)').duration(300).addAnimation(wrapperAnimation);\n};\n\n/**\n * MD Toast Enter Animation\n */\nconst mdEnterAnimation = (baseEl, opts) => {\n  const baseAnimation = createAnimation();\n  const wrapperAnimation = createAnimation();\n  const {\n    position,\n    top,\n    bottom\n  } = opts;\n  const root = getElementRoot(baseEl);\n  const wrapperEl = root.querySelector('.toast-wrapper');\n  wrapperAnimation.addElement(wrapperEl);\n  switch (position) {\n    case 'top':\n      wrapperEl.style.top = top;\n      wrapperAnimation.fromTo('opacity', 0.01, 1);\n      break;\n    case 'middle':\n      const topPosition = Math.floor(baseEl.clientHeight / 2 - wrapperEl.clientHeight / 2);\n      wrapperEl.style.top = `${topPosition}px`;\n      wrapperAnimation.fromTo('opacity', 0.01, 1);\n      break;\n    default:\n      wrapperEl.style.bottom = bottom;\n      wrapperAnimation.fromTo('opacity', 0.01, 1);\n      break;\n  }\n  return baseAnimation.easing('cubic-bezier(.36,.66,.04,1)').duration(400).addAnimation(wrapperAnimation);\n};\n\n/**\n * md Toast Leave Animation\n */\nconst mdLeaveAnimation = baseEl => {\n  const baseAnimation = createAnimation();\n  const wrapperAnimation = createAnimation();\n  const root = getElementRoot(baseEl);\n  const wrapperEl = root.querySelector('.toast-wrapper');\n  wrapperAnimation.addElement(wrapperEl).fromTo('opacity', 0.99, 0);\n  return baseAnimation.easing('cubic-bezier(.36,.66,.04,1)').duration(300).addAnimation(wrapperAnimation);\n};\n\n/**\n * Calculate the CSS top and bottom position of the toast, to be used\n * as starting points for the animation keyframes.\n *\n * Note that MD animates bottom-positioned toasts using style.bottom,\n * which calculates from the bottom edge of the screen, while iOS uses\n * translateY, which calculates from the top edge of the screen. This\n * is why the bottom calculates differ slightly between modes.\n *\n * @param position The value of the toast's position prop.\n * @param positionAnchor The element the toast should be anchored to,\n * if applicable.\n * @param mode The toast component's mode (md, ios, etc).\n * @param toast A reference to the toast element itself.\n */\nfunction getAnimationPosition(position, positionAnchor, mode, toast) {\n  /**\n   * Start with a predefined offset from the edge the toast will be\n   * positioned relative to, whether on the screen or anchor element.\n   */\n  let offset;\n  if (mode === 'md') {\n    offset = 8;\n  } else {\n    offset = position === 'top' ? 10 : -10;\n  }\n  /**\n   * If positionAnchor is defined, add in the distance from the target\n   * screen edge to the target anchor edge. For position=\"top\", the\n   * bottom anchor edge is targeted. For position=\"bottom\", the top\n   * anchor edge is targeted.\n   */\n  if (positionAnchor && win) {\n    warnIfAnchorIsHidden(positionAnchor, toast);\n    const box = positionAnchor.getBoundingClientRect();\n    if (position === 'top') {\n      offset += box.bottom;\n    } else if (position === 'bottom') {\n      /**\n       * Just box.top is the distance from the top edge of the screen\n       * to the top edge of the anchor. We want to calculate from the\n       * bottom edge of the screen instead.\n       */\n      if (mode === 'md') {\n        offset += win.innerHeight - box.top;\n      } else {\n        offset -= win.innerHeight - box.top;\n      }\n    }\n    /**\n     * We don't include safe area here because that should already be\n     * accounted for when checking the position of the anchor.\n     */\n    return {\n      top: `${offset}px`,\n      bottom: `${offset}px`\n    };\n  } else {\n    return {\n      top: `calc(${offset}px + var(--ion-safe-area-top, 0px))`,\n      bottom: mode === 'md' ? `calc(${offset}px + var(--ion-safe-area-bottom, 0px))` : `calc(${offset}px - var(--ion-safe-area-bottom, 0px))`\n    };\n  }\n}\n/**\n * If the anchor element is hidden, getBoundingClientRect()\n * will return all 0s for it, which can cause unexpected\n * results in the position calculation when animating.\n */\nfunction warnIfAnchorIsHidden(positionAnchor, toast) {\n  if (positionAnchor.offsetParent === null) {\n    printIonWarning('The positionAnchor element for ion-toast was found in the DOM, but appears to be hidden. This may lead to unexpected positioning of the toast.', toast);\n  }\n}\nconst toastIosCss = \":host{--border-width:0;--border-style:none;--border-color:initial;--box-shadow:none;--min-width:auto;--width:auto;--min-height:auto;--height:auto;--max-height:auto;--white-space:normal;top:0;display:block;position:absolute;width:100%;height:100%;outline:none;color:var(--color);font-family:var(--ion-font-family, inherit);contain:strict;z-index:1001;pointer-events:none}@supports (inset-inline-start: 0){:host{inset-inline-start:0}}@supports not (inset-inline-start: 0){:host{left:0}:host-context([dir=rtl]){left:unset;right:unset;right:0}@supports selector(:dir(rtl)){:host(:dir(rtl)){left:unset;right:unset;right:0}}}:host(.overlay-hidden){display:none}:host(.ion-color){--button-color:inherit;color:var(--ion-color-contrast)}:host(.ion-color) .toast-button-cancel{color:inherit}:host(.ion-color) .toast-wrapper{background:var(--ion-color-base)}.toast-wrapper{border-radius:var(--border-radius);width:var(--width);min-width:var(--min-width);max-width:var(--max-width);height:var(--height);min-height:var(--min-height);max-height:var(--max-height);border-width:var(--border-width);border-style:var(--border-style);border-color:var(--border-color);background:var(--background);-webkit-box-shadow:var(--box-shadow);box-shadow:var(--box-shadow)}@supports (inset-inline-start: 0){.toast-wrapper{inset-inline-start:var(--start);inset-inline-end:var(--end)}}@supports not (inset-inline-start: 0){.toast-wrapper{left:var(--start);right:var(--end)}:host-context([dir=rtl]) .toast-wrapper{left:unset;right:unset;left:var(--end);right:var(--start)}[dir=rtl] .toast-wrapper{left:unset;right:unset;left:var(--end);right:var(--start)}@supports selector(:dir(rtl)){.toast-wrapper:dir(rtl){left:unset;right:unset;left:var(--end);right:var(--start)}}}.toast-container{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;pointer-events:auto;height:inherit;min-height:inherit;max-height:inherit;contain:content}.toast-layout-stacked .toast-container{-ms-flex-wrap:wrap;flex-wrap:wrap}.toast-layout-baseline .toast-content{display:-ms-flexbox;display:flex;-ms-flex:1;flex:1;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center}.toast-icon{-webkit-margin-start:16px;margin-inline-start:16px}.toast-content{min-width:0}.toast-message{-ms-flex:1;flex:1;white-space:var(--white-space)}.toast-button-group{display:-ms-flexbox;display:flex}.toast-layout-stacked .toast-button-group{-ms-flex-pack:end;justify-content:end;width:100%}.toast-button{border:0;outline:none;color:var(--button-color);z-index:0}.toast-icon,.toast-button-icon{font-size:1.4em}.toast-button-inner{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center}@media (any-hover: hover){.toast-button:hover{cursor:pointer}}:host{--background:var(--ion-color-step-50, #f2f2f2);--border-radius:14px;--button-color:var(--ion-color-primary, #3880ff);--color:var(--ion-color-step-850, #262626);--max-width:700px;--max-height:478px;--start:10px;--end:10px;font-size:clamp(14px, 0.875rem, 43.4px)}.toast-wrapper{-webkit-margin-start:auto;margin-inline-start:auto;-webkit-margin-end:auto;margin-inline-end:auto;margin-top:auto;margin-bottom:auto;display:block;position:absolute;z-index:10}@supports ((-webkit-backdrop-filter: blur(0)) or (backdrop-filter: blur(0))){:host(.toast-translucent) .toast-wrapper{background:rgba(var(--ion-background-color-rgb, 255, 255, 255), 0.8);-webkit-backdrop-filter:saturate(180%) blur(20px);backdrop-filter:saturate(180%) blur(20px)}:host(.ion-color.toast-translucent) .toast-wrapper{background:rgba(var(--ion-color-base-rgb), 0.8)}}.toast-wrapper.toast-top{-webkit-transform:translate3d(0,  -100%,  0);transform:translate3d(0,  -100%,  0);top:0}.toast-wrapper.toast-middle{opacity:0.01}.toast-wrapper.toast-bottom{-webkit-transform:translate3d(0,  100%,  0);transform:translate3d(0,  100%,  0);bottom:0}.toast-content{-webkit-padding-start:15px;padding-inline-start:15px;-webkit-padding-end:15px;padding-inline-end:15px;padding-top:15px;padding-bottom:15px}.toast-header{margin-bottom:2px;font-weight:500}.toast-button{-webkit-padding-start:15px;padding-inline-start:15px;-webkit-padding-end:15px;padding-inline-end:15px;padding-top:10px;padding-bottom:10px;min-height:44px;-webkit-transition:background-color, opacity 100ms linear;transition:background-color, opacity 100ms linear;border:0;background-color:transparent;font-family:var(--ion-font-family);font-size:clamp(17px, 1.0625rem, 21.998px);font-weight:500;overflow:hidden}.toast-button.ion-activated{opacity:0.4}@media (any-hover: hover){.toast-button:hover{opacity:0.6}}\";\nconst toastMdCss = \":host{--border-width:0;--border-style:none;--border-color:initial;--box-shadow:none;--min-width:auto;--width:auto;--min-height:auto;--height:auto;--max-height:auto;--white-space:normal;top:0;display:block;position:absolute;width:100%;height:100%;outline:none;color:var(--color);font-family:var(--ion-font-family, inherit);contain:strict;z-index:1001;pointer-events:none}@supports (inset-inline-start: 0){:host{inset-inline-start:0}}@supports not (inset-inline-start: 0){:host{left:0}:host-context([dir=rtl]){left:unset;right:unset;right:0}@supports selector(:dir(rtl)){:host(:dir(rtl)){left:unset;right:unset;right:0}}}:host(.overlay-hidden){display:none}:host(.ion-color){--button-color:inherit;color:var(--ion-color-contrast)}:host(.ion-color) .toast-button-cancel{color:inherit}:host(.ion-color) .toast-wrapper{background:var(--ion-color-base)}.toast-wrapper{border-radius:var(--border-radius);width:var(--width);min-width:var(--min-width);max-width:var(--max-width);height:var(--height);min-height:var(--min-height);max-height:var(--max-height);border-width:var(--border-width);border-style:var(--border-style);border-color:var(--border-color);background:var(--background);-webkit-box-shadow:var(--box-shadow);box-shadow:var(--box-shadow)}@supports (inset-inline-start: 0){.toast-wrapper{inset-inline-start:var(--start);inset-inline-end:var(--end)}}@supports not (inset-inline-start: 0){.toast-wrapper{left:var(--start);right:var(--end)}:host-context([dir=rtl]) .toast-wrapper{left:unset;right:unset;left:var(--end);right:var(--start)}[dir=rtl] .toast-wrapper{left:unset;right:unset;left:var(--end);right:var(--start)}@supports selector(:dir(rtl)){.toast-wrapper:dir(rtl){left:unset;right:unset;left:var(--end);right:var(--start)}}}.toast-container{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;pointer-events:auto;height:inherit;min-height:inherit;max-height:inherit;contain:content}.toast-layout-stacked .toast-container{-ms-flex-wrap:wrap;flex-wrap:wrap}.toast-layout-baseline .toast-content{display:-ms-flexbox;display:flex;-ms-flex:1;flex:1;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center}.toast-icon{-webkit-margin-start:16px;margin-inline-start:16px}.toast-content{min-width:0}.toast-message{-ms-flex:1;flex:1;white-space:var(--white-space)}.toast-button-group{display:-ms-flexbox;display:flex}.toast-layout-stacked .toast-button-group{-ms-flex-pack:end;justify-content:end;width:100%}.toast-button{border:0;outline:none;color:var(--button-color);z-index:0}.toast-icon,.toast-button-icon{font-size:1.4em}.toast-button-inner{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center}@media (any-hover: hover){.toast-button:hover{cursor:pointer}}:host{--background:var(--ion-color-step-800, #333333);--border-radius:4px;--box-shadow:0 3px 5px -1px rgba(0, 0, 0, 0.2), 0 6px 10px 0 rgba(0, 0, 0, 0.14), 0 1px 18px 0 rgba(0, 0, 0, 0.12);--button-color:var(--ion-color-primary, #3880ff);--color:var(--ion-color-step-50, #f2f2f2);--max-width:700px;--start:8px;--end:8px;font-size:0.875rem}.toast-wrapper{-webkit-margin-start:auto;margin-inline-start:auto;-webkit-margin-end:auto;margin-inline-end:auto;margin-top:auto;margin-bottom:auto;display:block;position:absolute;opacity:0.01;z-index:10}.toast-content{-webkit-padding-start:16px;padding-inline-start:16px;-webkit-padding-end:16px;padding-inline-end:16px;padding-top:14px;padding-bottom:14px}.toast-header{margin-bottom:2px;font-weight:500;line-height:1.25rem}.toast-message{line-height:1.25rem}.toast-layout-baseline .toast-button-group-start{-webkit-margin-start:8px;margin-inline-start:8px}.toast-layout-stacked .toast-button-group-start{-webkit-margin-end:8px;margin-inline-end:8px;margin-top:8px}.toast-layout-baseline .toast-button-group-end{-webkit-margin-end:8px;margin-inline-end:8px}.toast-layout-stacked .toast-button-group-end{-webkit-margin-end:8px;margin-inline-end:8px;margin-bottom:8px}.toast-button{-webkit-padding-start:15px;padding-inline-start:15px;-webkit-padding-end:15px;padding-inline-end:15px;padding-top:10px;padding-bottom:10px;position:relative;background-color:transparent;font-family:var(--ion-font-family);font-size:0.875rem;font-weight:500;letter-spacing:0.84px;text-transform:uppercase;overflow:hidden}.toast-button-cancel{color:var(--ion-color-step-100, #e6e6e6)}.toast-button-icon-only{border-radius:50%;-webkit-padding-start:9px;padding-inline-start:9px;-webkit-padding-end:9px;padding-inline-end:9px;padding-top:9px;padding-bottom:9px;width:36px;height:36px}@media (any-hover: hover){.toast-button:hover{background-color:rgba(var(--ion-color-primary-rgb, 56, 128, 255), 0.08)}.toast-button-cancel:hover{background-color:rgba(var(--ion-background-color-rgb, 255, 255, 255), 0.08)}}\";\nconst Toast = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.didPresent = createEvent(this, \"ionToastDidPresent\", 7);\n    this.willPresent = createEvent(this, \"ionToastWillPresent\", 7);\n    this.willDismiss = createEvent(this, \"ionToastWillDismiss\", 7);\n    this.didDismiss = createEvent(this, \"ionToastDidDismiss\", 7);\n    this.didPresentShorthand = createEvent(this, \"didPresent\", 7);\n    this.willPresentShorthand = createEvent(this, \"willPresent\", 7);\n    this.willDismissShorthand = createEvent(this, \"willDismiss\", 7);\n    this.didDismissShorthand = createEvent(this, \"didDismiss\", 7);\n    this.delegateController = createDelegateController(this);\n    this.lockController = createLockController();\n    this.triggerController = createTriggerController();\n    this.customHTMLEnabled = config.get('innerHTMLTemplatesEnabled', ENABLE_HTML_CONTENT_DEFAULT);\n    this.presented = false;\n    this.dispatchCancelHandler = ev => {\n      const role = ev.detail.role;\n      if (isCancel(role)) {\n        const cancelButton = this.getButtons().find(b => b.role === 'cancel');\n        this.callButtonHandler(cancelButton);\n      }\n    };\n    this.revealContentToScreenReader = false;\n    this.overlayIndex = undefined;\n    this.delegate = undefined;\n    this.hasController = false;\n    this.color = undefined;\n    this.enterAnimation = undefined;\n    this.leaveAnimation = undefined;\n    this.cssClass = undefined;\n    this.duration = config.getNumber('toastDuration', 0);\n    this.header = undefined;\n    this.layout = 'baseline';\n    this.message = undefined;\n    this.keyboardClose = false;\n    this.position = 'bottom';\n    this.positionAnchor = undefined;\n    this.buttons = undefined;\n    this.translucent = false;\n    this.animated = true;\n    this.icon = undefined;\n    this.htmlAttributes = undefined;\n    this.isOpen = false;\n    this.trigger = undefined;\n  }\n  onIsOpenChange(newValue, oldValue) {\n    if (newValue === true && oldValue === false) {\n      this.present();\n    } else if (newValue === false && oldValue === true) {\n      this.dismiss();\n    }\n  }\n  triggerChanged() {\n    const {\n      trigger,\n      el,\n      triggerController\n    } = this;\n    if (trigger) {\n      triggerController.addClickListener(el, trigger);\n    }\n  }\n  connectedCallback() {\n    prepareOverlay(this.el);\n    this.triggerChanged();\n  }\n  disconnectedCallback() {\n    this.triggerController.removeClickListener();\n  }\n  componentWillLoad() {\n    setOverlayId(this.el);\n  }\n  componentDidLoad() {\n    /**\n     * If toast was rendered with isOpen=\"true\"\n     * then we should open toast immediately.\n     */\n    if (this.isOpen === true) {\n      raf(() => this.present());\n    }\n  }\n  /**\n   * Present the toast overlay after it has been created.\n   */\n  present() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const unlock = yield _this.lockController.lock();\n      yield _this.delegateController.attachViewToDom();\n      const {\n        el,\n        position\n      } = _this;\n      const anchor = _this.getAnchorElement();\n      const animationPosition = getAnimationPosition(position, anchor, getIonMode(_this), el);\n      /**\n       * Cache the calculated position of the toast, so we can re-use it\n       * in the dismiss animation.\n       */\n      _this.lastPresentedPosition = animationPosition;\n      yield present(_this, 'toastEnter', iosEnterAnimation, mdEnterAnimation, {\n        position,\n        top: animationPosition.top,\n        bottom: animationPosition.bottom\n      });\n      /**\n       * Content is revealed to screen readers after\n       * the transition to avoid jank since this\n       * state updates will cause a re-render.\n       */\n      _this.revealContentToScreenReader = true;\n      if (_this.duration > 0) {\n        _this.durationTimeout = setTimeout(() => _this.dismiss(undefined, 'timeout'), _this.duration);\n      }\n      unlock();\n    })();\n  }\n  /**\n   * Dismiss the toast overlay after it has been presented.\n   *\n   * @param data Any data to emit in the dismiss events.\n   * @param role The role of the element that is dismissing the toast.\n   * This can be useful in a button handler for determining which button was\n   * clicked to dismiss the toast.\n   * Some examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`.\n   */\n  dismiss(data, role) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      var _a, _b;\n      const unlock = yield _this2.lockController.lock();\n      const {\n        durationTimeout,\n        position,\n        lastPresentedPosition\n      } = _this2;\n      if (durationTimeout) {\n        clearTimeout(durationTimeout);\n      }\n      const dismissed = yield dismiss(_this2, data, role, 'toastLeave', iosLeaveAnimation, mdLeaveAnimation,\n      /**\n       * Fetch the cached position that was calculated back in the present\n       * animation. We always want to animate the dismiss from the same\n       * position the present stopped at, so the animation looks continuous.\n       */\n      {\n        position,\n        top: (_a = lastPresentedPosition === null || lastPresentedPosition === void 0 ? void 0 : lastPresentedPosition.top) !== null && _a !== void 0 ? _a : '',\n        bottom: (_b = lastPresentedPosition === null || lastPresentedPosition === void 0 ? void 0 : lastPresentedPosition.bottom) !== null && _b !== void 0 ? _b : ''\n      });\n      if (dismissed) {\n        _this2.delegateController.removeViewFromDom();\n        _this2.revealContentToScreenReader = false;\n      }\n      _this2.lastPresentedPosition = undefined;\n      unlock();\n      return dismissed;\n    })();\n  }\n  /**\n   * Returns a promise that resolves when the toast did dismiss.\n   */\n  onDidDismiss() {\n    return eventMethod(this.el, 'ionToastDidDismiss');\n  }\n  /**\n   * Returns a promise that resolves when the toast will dismiss.\n   */\n  onWillDismiss() {\n    return eventMethod(this.el, 'ionToastWillDismiss');\n  }\n  getButtons() {\n    const buttons = this.buttons ? this.buttons.map(b => {\n      return typeof b === 'string' ? {\n        text: b\n      } : b;\n    }) : [];\n    return buttons;\n  }\n  /**\n   * Returns the element specified by the positionAnchor prop,\n   * or undefined if prop's value is an ID string and the element\n   * is not found in the DOM.\n   */\n  getAnchorElement() {\n    const {\n      position,\n      positionAnchor,\n      el\n    } = this;\n    /**\n     * If positionAnchor is undefined then\n     * no anchor should be used when presenting the toast.\n     */\n    if (positionAnchor === undefined) {\n      return;\n    }\n    if (position === 'middle' && positionAnchor !== undefined) {\n      printIonWarning('The positionAnchor property is ignored when using position=\"middle\".', this.el);\n      return undefined;\n    }\n    if (typeof positionAnchor === 'string') {\n      /**\n       * If the anchor is defined as an ID, find the element.\n       * We do this on every present so the toast doesn't need\n       * to account for the surrounding DOM changing since the\n       * last time it was presented.\n       */\n      const foundEl = document.getElementById(positionAnchor);\n      if (foundEl === null) {\n        printIonWarning(`An anchor element with an ID of \"${positionAnchor}\" was not found in the DOM.`, el);\n        return undefined;\n      }\n      return foundEl;\n    }\n    if (positionAnchor instanceof HTMLElement) {\n      return positionAnchor;\n    }\n    printIonWarning('Invalid positionAnchor value:', positionAnchor, el);\n    return undefined;\n  }\n  buttonClick(button) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const role = button.role;\n      if (isCancel(role)) {\n        return _this3.dismiss(undefined, role);\n      }\n      const shouldDismiss = yield _this3.callButtonHandler(button);\n      if (shouldDismiss) {\n        return _this3.dismiss(undefined, role);\n      }\n      return Promise.resolve();\n    })();\n  }\n  callButtonHandler(button) {\n    return _asyncToGenerator(function* () {\n      if (button === null || button === void 0 ? void 0 : button.handler) {\n        // a handler has been provided, execute it\n        // pass the handler the values from the inputs\n        try {\n          const rtn = yield safeCall(button.handler);\n          if (rtn === false) {\n            // if the return value of the handler is false then do not dismiss\n            return false;\n          }\n        } catch (e) {\n          console.error(e);\n        }\n      }\n      return true;\n    })();\n  }\n  renderButtons(buttons, side) {\n    if (buttons.length === 0) {\n      return;\n    }\n    const mode = getIonMode(this);\n    const buttonGroupsClasses = {\n      'toast-button-group': true,\n      [`toast-button-group-${side}`]: true\n    };\n    return h(\"div\", {\n      class: buttonGroupsClasses\n    }, buttons.map(b => h(\"button\", Object.assign({}, b.htmlAttributes, {\n      type: \"button\",\n      class: buttonClass(b),\n      tabIndex: 0,\n      onClick: () => this.buttonClick(b),\n      part: buttonPart(b)\n    }), h(\"div\", {\n      class: \"toast-button-inner\"\n    }, b.icon && h(\"ion-icon\", {\n      \"aria-hidden\": \"true\",\n      icon: b.icon,\n      slot: b.text === undefined ? 'icon-only' : undefined,\n      class: \"toast-button-icon\"\n    }), b.text), mode === 'md' && h(\"ion-ripple-effect\", {\n      type: b.icon !== undefined && b.text === undefined ? 'unbounded' : 'bounded'\n    }))));\n  }\n  /**\n   * Render the `message` property.\n   * @param key - A key to give the element a stable identity. This is used to improve compatibility with screen readers.\n   * @param ariaHidden - If \"true\" then content will be hidden from screen readers.\n   */\n  renderToastMessage(key, ariaHidden = null) {\n    const {\n      customHTMLEnabled,\n      message\n    } = this;\n    if (customHTMLEnabled) {\n      return h(\"div\", {\n        key: key,\n        \"aria-hidden\": ariaHidden,\n        class: \"toast-message\",\n        part: \"message\",\n        innerHTML: sanitizeDOMString(message)\n      });\n    }\n    return h(\"div\", {\n      key: key,\n      \"aria-hidden\": ariaHidden,\n      class: \"toast-message\",\n      part: \"message\"\n    }, message);\n  }\n  /**\n   * Render the `header` property.\n   * @param key - A key to give the element a stable identity. This is used to improve compatibility with screen readers.\n   * @param ariaHidden - If \"true\" then content will be hidden from screen readers.\n   */\n  renderHeader(key, ariaHidden = null) {\n    return h(\"div\", {\n      key: key,\n      class: \"toast-header\",\n      \"aria-hidden\": ariaHidden,\n      part: \"header\"\n    }, this.header);\n  }\n  render() {\n    const {\n      layout,\n      el,\n      revealContentToScreenReader,\n      header,\n      message\n    } = this;\n    const allButtons = this.getButtons();\n    const startButtons = allButtons.filter(b => b.side === 'start');\n    const endButtons = allButtons.filter(b => b.side !== 'start');\n    const mode = getIonMode(this);\n    const wrapperClass = {\n      'toast-wrapper': true,\n      [`toast-${this.position}`]: true,\n      [`toast-layout-${layout}`]: true\n    };\n    /**\n     * Stacked buttons are only meant to be\n     *  used with one type of button.\n     */\n    if (layout === 'stacked' && startButtons.length > 0 && endButtons.length > 0) {\n      printIonWarning('This toast is using start and end buttons with the stacked toast layout. We recommend following the best practice of using either start or end buttons with the stacked toast layout.', el);\n    }\n    return h(Host, Object.assign({\n      tabindex: \"-1\"\n    }, this.htmlAttributes, {\n      style: {\n        zIndex: `${60000 + this.overlayIndex}`\n      },\n      class: createColorClasses(this.color, Object.assign(Object.assign({\n        [mode]: true\n      }, getClassMap(this.cssClass)), {\n        'overlay-hidden': true,\n        'toast-translucent': this.translucent\n      })),\n      onIonToastWillDismiss: this.dispatchCancelHandler\n    }), h(\"div\", {\n      class: wrapperClass\n    }, h(\"div\", {\n      class: \"toast-container\",\n      part: \"container\"\n    }, this.renderButtons(startButtons, 'start'), this.icon !== undefined && h(\"ion-icon\", {\n      class: \"toast-icon\",\n      part: \"icon\",\n      icon: this.icon,\n      lazy: false,\n      \"aria-hidden\": \"true\"\n    }), h(\"div\", {\n      class: \"toast-content\",\n      role: \"status\",\n      \"aria-atomic\": \"true\",\n      \"aria-live\": \"polite\"\n    }, !revealContentToScreenReader && header !== undefined && this.renderHeader('oldHeader', 'true'), !revealContentToScreenReader && message !== undefined && this.renderToastMessage('oldMessage', 'true'), revealContentToScreenReader && header !== undefined && this.renderHeader('header'), revealContentToScreenReader && message !== undefined && this.renderToastMessage('header')), this.renderButtons(endButtons, 'end'))));\n  }\n  get el() {\n    return getElement(this);\n  }\n  static get watchers() {\n    return {\n      \"isOpen\": [\"onIsOpenChange\"],\n      \"trigger\": [\"triggerChanged\"]\n    };\n  }\n};\nconst buttonClass = button => {\n  return Object.assign({\n    'toast-button': true,\n    'toast-button-icon-only': button.icon !== undefined && button.text === undefined,\n    [`toast-button-${button.role}`]: button.role !== undefined,\n    'ion-focusable': true,\n    'ion-activatable': true\n  }, getClassMap(button.cssClass));\n};\nconst buttonPart = button => {\n  return isCancel(button.role) ? 'button cancel' : 'button';\n};\nToast.style = {\n  ios: toastIosCss,\n  md: toastMdCss\n};\nexport { Toast as ion_toast };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}