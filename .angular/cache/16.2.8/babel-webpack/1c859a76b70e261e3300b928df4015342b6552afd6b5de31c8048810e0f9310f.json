{"ast":null,"code":"/*\n Stencil Client Platform v4.7.2 | MIT Licensed | https://stenciljs.com\n */\n/**\n * Utility function that will escape all regular expression special characters in a string.\n *\n * @param text The string potentially containing special characters.\n * @returns The string with all special characters escaped.\n */\nconst escapeRegExpSpecialCharacters = text => {\n  return text.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n};\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n *\n * This file is a port of shadowCSS from `webcomponents.js` to TypeScript.\n * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js\n * https://github.com/angular/angular/blob/master/packages/compiler/src/shadow_css.ts\n */\nconst safeSelector = selector => {\n  const placeholders = [];\n  let index = 0;\n  // Replaces attribute selectors with placeholders.\n  // The WS in [attr=\"va lue\"] would otherwise be interpreted as a selector separator.\n  selector = selector.replace(/(\\[[^\\]]*\\])/g, (_, keep) => {\n    const replaceBy = `__ph-${index}__`;\n    placeholders.push(keep);\n    index++;\n    return replaceBy;\n  });\n  // Replaces the expression in `:nth-child(2n + 1)` with a placeholder.\n  // WS and \"+\" would otherwise be interpreted as selector separators.\n  const content = selector.replace(/(:nth-[-\\w]+)(\\([^)]+\\))/g, (_, pseudo, exp) => {\n    const replaceBy = `__ph-${index}__`;\n    placeholders.push(exp);\n    index++;\n    return pseudo + replaceBy;\n  });\n  const ss = {\n    content,\n    placeholders\n  };\n  return ss;\n};\nconst restoreSafeSelector = (placeholders, content) => {\n  return content.replace(/__ph-(\\d+)__/g, (_, index) => placeholders[+index]);\n};\nconst _polyfillHost = '-shadowcsshost';\nconst _polyfillSlotted = '-shadowcssslotted';\n// note: :host-context pre-processed to -shadowcsshostcontext.\nconst _polyfillHostContext = '-shadowcsscontext';\nconst _parenSuffix = ')(?:\\\\((' + '(?:\\\\([^)(]*\\\\)|[^)(]*)+?' + ')\\\\))?([^,{]*)';\nconst _cssColonHostRe = new RegExp('(' + _polyfillHost + _parenSuffix, 'gim');\nconst _cssColonHostContextRe = new RegExp('(' + _polyfillHostContext + _parenSuffix, 'gim');\nconst _cssColonSlottedRe = new RegExp('(' + _polyfillSlotted + _parenSuffix, 'gim');\nconst _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';\nconst _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\\s]*)/;\nconst _shadowDOMSelectorsRe = [/::shadow/g, /::content/g];\nconst _selectorReSuffix = '([>\\\\s~+[.,{:][\\\\s\\\\S]*)?$';\nconst _polyfillHostRe = /-shadowcsshost/gim;\n/**\n * Little helper for generating a regex that will match a specified\n * CSS selector when that selector is _not_ a part of a `@supports` rule.\n *\n * The pattern will match the provided `selector` (i.e. ':host', ':host-context', etc.)\n * when that selector is not a part of a `@supports` selector rule _or_ if the selector\n * is a part of the rule's declaration.\n *\n * For instance, if we create the regex with the selector ':host-context':\n * - '@supports selector(:host-context())' will return no matches (starts with '@supports')\n * - '@supports selector(:host-context()) { :host-context() { ... }}' will match the second ':host-context' (part of declaration)\n * - ':host-context() { ... }' will match ':host-context' (selector is not a '@supports' rule)\n * - ':host() { ... }' will return no matches (selector doesn't match selector used to create regex)\n *\n * @param selector The CSS selector we want to match for replacement\n * @returns A look-behind regex containing the selector\n */\nconst createSupportsRuleRe = selector => new RegExp(`((?<!(^@supports(.*)))|(?<=\\{.*))(${selector}\\\\b)`, 'gim');\nconst _colonSlottedRe = createSupportsRuleRe('::slotted');\nconst _colonHostRe = createSupportsRuleRe(':host');\nconst _colonHostContextRe = createSupportsRuleRe(':host-context');\nconst _commentRe = /\\/\\*\\s*[\\s\\S]*?\\*\\//g;\nconst stripComments = input => {\n  return input.replace(_commentRe, '');\n};\nconst _commentWithHashRe = /\\/\\*\\s*#\\s*source(Mapping)?URL=[\\s\\S]+?\\*\\//g;\nconst extractCommentsWithHash = input => {\n  return input.match(_commentWithHashRe) || [];\n};\nconst _ruleRe = /(\\s*)([^;\\{\\}]+?)(\\s*)((?:{%BLOCK%}?\\s*;?)|(?:\\s*;))/g;\nconst _curlyRe = /([{}])/g;\nconst _selectorPartsRe = /(^.*?[^\\\\])??((:+)(.*)|$)/;\nconst OPEN_CURLY = '{';\nconst CLOSE_CURLY = '}';\nconst BLOCK_PLACEHOLDER = '%BLOCK%';\nconst processRules = (input, ruleCallback) => {\n  const inputWithEscapedBlocks = escapeBlocks(input);\n  let nextBlockIndex = 0;\n  return inputWithEscapedBlocks.escapedString.replace(_ruleRe, (...m) => {\n    const selector = m[2];\n    let content = '';\n    let suffix = m[4];\n    let contentPrefix = '';\n    if (suffix && suffix.startsWith('{' + BLOCK_PLACEHOLDER)) {\n      content = inputWithEscapedBlocks.blocks[nextBlockIndex++];\n      suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);\n      contentPrefix = '{';\n    }\n    const cssRule = {\n      selector,\n      content\n    };\n    const rule = ruleCallback(cssRule);\n    return `${m[1]}${rule.selector}${m[3]}${contentPrefix}${rule.content}${suffix}`;\n  });\n};\nconst escapeBlocks = input => {\n  const inputParts = input.split(_curlyRe);\n  const resultParts = [];\n  const escapedBlocks = [];\n  let bracketCount = 0;\n  let currentBlockParts = [];\n  for (let partIndex = 0; partIndex < inputParts.length; partIndex++) {\n    const part = inputParts[partIndex];\n    if (part === CLOSE_CURLY) {\n      bracketCount--;\n    }\n    if (bracketCount > 0) {\n      currentBlockParts.push(part);\n    } else {\n      if (currentBlockParts.length > 0) {\n        escapedBlocks.push(currentBlockParts.join(''));\n        resultParts.push(BLOCK_PLACEHOLDER);\n        currentBlockParts = [];\n      }\n      resultParts.push(part);\n    }\n    if (part === OPEN_CURLY) {\n      bracketCount++;\n    }\n  }\n  if (currentBlockParts.length > 0) {\n    escapedBlocks.push(currentBlockParts.join(''));\n    resultParts.push(BLOCK_PLACEHOLDER);\n  }\n  const strEscapedBlocks = {\n    escapedString: resultParts.join(''),\n    blocks: escapedBlocks\n  };\n  return strEscapedBlocks;\n};\n/**\n * Replaces certain strings within the CSS with placeholders\n * that will later be replaced with class selectors appropriate\n * for the level of encapsulation (shadow or scoped).\n *\n * When performing these replacements, we want to ignore selectors that are a\n * part of an `@supports` rule. Replacing these selectors will result in invalid\n * CSS that gets passed to autoprefixer/postcss once the placeholders are replaced.\n * For example, a rule like:\n *\n * ```css\n * @supports selector(:host()) {\n *   :host {\n *     color: red;\n *   }\n * }\n * ```\n *\n * Should be converted to:\n *\n * ```css\n * @supports selector(:host()) {\n *   -shadowcsshost {\n *     color: red;\n *   }\n * }\n * ```\n *\n * The order the regex replacements happen in matters since we match\n * against a whole selector word so we need to match all of `:host-context`\n * before we try to replace `:host`. Otherwise the pattern for `:host` would match\n * `:host-context` resulting in something like `:-shadowcsshost-context`.\n *\n * @param cssText A CSS string for a component\n * @returns The modified CSS string\n */\nconst insertPolyfillHostInCssText = cssText => {\n  // These replacements use a special syntax with the `$1`. When the replacement\n  // occurs, `$1` maps to the content of the string leading up to the selector\n  // to be replaced.\n  //\n  // Otherwise, we will replace all the preceding content in addition to the\n  // selector because of the lookbehind in the regex.\n  //\n  // e.g. `/*!@___0___*/:host {}` => `/*!@___0___*/--shadowcsshost {}`\n  cssText = cssText.replace(_colonHostContextRe, `$1${_polyfillHostContext}`).replace(_colonHostRe, `$1${_polyfillHost}`).replace(_colonSlottedRe, `$1${_polyfillSlotted}`);\n  return cssText;\n};\nconst convertColonRule = (cssText, regExp, partReplacer) => {\n  // m[1] = :host(-context), m[2] = contents of (), m[3] rest of rule\n  return cssText.replace(regExp, (...m) => {\n    if (m[2]) {\n      const parts = m[2].split(',');\n      const r = [];\n      for (let i = 0; i < parts.length; i++) {\n        const p = parts[i].trim();\n        if (!p) break;\n        r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));\n      }\n      return r.join(',');\n    } else {\n      return _polyfillHostNoCombinator + m[3];\n    }\n  });\n};\nconst colonHostPartReplacer = (host, part, suffix) => {\n  return host + part.replace(_polyfillHost, '') + suffix;\n};\nconst convertColonHost = cssText => {\n  return convertColonRule(cssText, _cssColonHostRe, colonHostPartReplacer);\n};\nconst colonHostContextPartReplacer = (host, part, suffix) => {\n  if (part.indexOf(_polyfillHost) > -1) {\n    return colonHostPartReplacer(host, part, suffix);\n  } else {\n    return host + part + suffix + ', ' + part + ' ' + host + suffix;\n  }\n};\nconst convertColonSlotted = (cssText, slotScopeId) => {\n  const slotClass = '.' + slotScopeId + ' > ';\n  const selectors = [];\n  cssText = cssText.replace(_cssColonSlottedRe, (...m) => {\n    if (m[2]) {\n      const compound = m[2].trim();\n      const suffix = m[3];\n      const slottedSelector = slotClass + compound + suffix;\n      let prefixSelector = '';\n      for (let i = m[4] - 1; i >= 0; i--) {\n        const char = m[5][i];\n        if (char === '}' || char === ',') {\n          break;\n        }\n        prefixSelector = char + prefixSelector;\n      }\n      const orgSelector = (prefixSelector + slottedSelector).trim();\n      const addedSelector = `${prefixSelector.trimEnd()}${slottedSelector.trim()}`.trim();\n      if (orgSelector !== addedSelector) {\n        const updatedSelector = `${addedSelector}, ${orgSelector}`;\n        selectors.push({\n          orgSelector,\n          updatedSelector\n        });\n      }\n      return slottedSelector;\n    } else {\n      return _polyfillHostNoCombinator + m[3];\n    }\n  });\n  return {\n    selectors,\n    cssText\n  };\n};\nconst convertColonHostContext = cssText => {\n  return convertColonRule(cssText, _cssColonHostContextRe, colonHostContextPartReplacer);\n};\nconst convertShadowDOMSelectors = cssText => {\n  return _shadowDOMSelectorsRe.reduce((result, pattern) => result.replace(pattern, ' '), cssText);\n};\nconst makeScopeMatcher = scopeSelector => {\n  const lre = /\\[/g;\n  const rre = /\\]/g;\n  scopeSelector = scopeSelector.replace(lre, '\\\\[').replace(rre, '\\\\]');\n  return new RegExp('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');\n};\nconst selectorNeedsScoping = (selector, scopeSelector) => {\n  const re = makeScopeMatcher(scopeSelector);\n  return !re.test(selector);\n};\nconst injectScopingSelector = (selector, scopingSelector) => {\n  return selector.replace(_selectorPartsRe, (_, before = '', _colonGroup, colon = '', after = '') => {\n    return before + scopingSelector + colon + after;\n  });\n};\nconst applySimpleSelectorScope = (selector, scopeSelector, hostSelector) => {\n  // In Android browser, the lastIndex is not reset when the regex is used in String.replace()\n  _polyfillHostRe.lastIndex = 0;\n  if (_polyfillHostRe.test(selector)) {\n    const replaceBy = `.${hostSelector}`;\n    return selector.replace(_polyfillHostNoCombinatorRe, (_, selector) => injectScopingSelector(selector, replaceBy)).replace(_polyfillHostRe, replaceBy + ' ');\n  }\n  return scopeSelector + ' ' + selector;\n};\nconst applyStrictSelectorScope = (selector, scopeSelector, hostSelector) => {\n  const isRe = /\\[is=([^\\]]*)\\]/g;\n  scopeSelector = scopeSelector.replace(isRe, (_, ...parts) => parts[0]);\n  const className = '.' + scopeSelector;\n  const _scopeSelectorPart = p => {\n    let scopedP = p.trim();\n    if (!scopedP) {\n      return '';\n    }\n    if (p.indexOf(_polyfillHostNoCombinator) > -1) {\n      scopedP = applySimpleSelectorScope(p, scopeSelector, hostSelector);\n    } else {\n      // remove :host since it should be unnecessary\n      const t = p.replace(_polyfillHostRe, '');\n      if (t.length > 0) {\n        scopedP = injectScopingSelector(t, className);\n      }\n    }\n    return scopedP;\n  };\n  const safeContent = safeSelector(selector);\n  selector = safeContent.content;\n  let scopedSelector = '';\n  let startIndex = 0;\n  let res;\n  const sep = /( |>|\\+|~(?!=))\\s*/g;\n  // If a selector appears before :host it should not be shimmed as it\n  // matches on ancestor elements and not on elements in the host's shadow\n  // `:host-context(div)` is transformed to\n  // `-shadowcsshost-no-combinatordiv, div -shadowcsshost-no-combinator`\n  // the `div` is not part of the component in the 2nd selectors and should not be scoped.\n  // Historically `component-tag:host` was matching the component so we also want to preserve\n  // this behavior to avoid breaking legacy apps (it should not match).\n  // The behavior should be:\n  // - `tag:host` -> `tag[h]` (this is to avoid breaking legacy apps, should not match anything)\n  // - `tag :host` -> `tag [h]` (`tag` is not scoped because it's considered part of a\n  //   `:host-context(tag)`)\n  const hasHost = selector.indexOf(_polyfillHostNoCombinator) > -1;\n  // Only scope parts after the first `-shadowcsshost-no-combinator` when it is present\n  let shouldScope = !hasHost;\n  while ((res = sep.exec(selector)) !== null) {\n    const separator = res[1];\n    const part = selector.slice(startIndex, res.index).trim();\n    shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n    const scopedPart = shouldScope ? _scopeSelectorPart(part) : part;\n    scopedSelector += `${scopedPart} ${separator} `;\n    startIndex = sep.lastIndex;\n  }\n  const part = selector.substring(startIndex);\n  shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n  scopedSelector += shouldScope ? _scopeSelectorPart(part) : part;\n  // replace the placeholders with their original values\n  return restoreSafeSelector(safeContent.placeholders, scopedSelector);\n};\nconst scopeSelector = (selector, scopeSelectorText, hostSelector, slotSelector) => {\n  return selector.split(',').map(shallowPart => {\n    if (slotSelector && shallowPart.indexOf('.' + slotSelector) > -1) {\n      return shallowPart.trim();\n    }\n    if (selectorNeedsScoping(shallowPart, scopeSelectorText)) {\n      return applyStrictSelectorScope(shallowPart, scopeSelectorText, hostSelector).trim();\n    } else {\n      return shallowPart.trim();\n    }\n  }).join(', ');\n};\nconst scopeSelectors = (cssText, scopeSelectorText, hostSelector, slotSelector, commentOriginalSelector) => {\n  return processRules(cssText, rule => {\n    let selector = rule.selector;\n    let content = rule.content;\n    if (rule.selector[0] !== '@') {\n      selector = scopeSelector(rule.selector, scopeSelectorText, hostSelector, slotSelector);\n    } else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') || rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {\n      content = scopeSelectors(rule.content, scopeSelectorText, hostSelector, slotSelector);\n    }\n    const cssRule = {\n      selector: selector.replace(/\\s{2,}/g, ' ').trim(),\n      content\n    };\n    return cssRule;\n  });\n};\nconst scopeCssText = (cssText, scopeId, hostScopeId, slotScopeId, commentOriginalSelector) => {\n  cssText = insertPolyfillHostInCssText(cssText);\n  cssText = convertColonHost(cssText);\n  cssText = convertColonHostContext(cssText);\n  const slotted = convertColonSlotted(cssText, slotScopeId);\n  cssText = slotted.cssText;\n  cssText = convertShadowDOMSelectors(cssText);\n  if (scopeId) {\n    cssText = scopeSelectors(cssText, scopeId, hostScopeId, slotScopeId);\n  }\n  cssText = replaceShadowCssHost(cssText, hostScopeId);\n  cssText = cssText.replace(/>\\s*\\*\\s+([^{, ]+)/gm, ' $1 ');\n  return {\n    cssText: cssText.trim(),\n    // We need to replace the shadow CSS host string in each of these selectors since we created\n    // them prior to the replacement happening in the components CSS text.\n    slottedSelectors: slotted.selectors.map(ref => ({\n      orgSelector: replaceShadowCssHost(ref.orgSelector, hostScopeId),\n      updatedSelector: replaceShadowCssHost(ref.updatedSelector, hostScopeId)\n    }))\n  };\n};\n/**\n * Helper function that replaces the interim string representing a `:host` selector with\n * the host scope selector class for the element.\n *\n * @param cssText The CSS string to make the replacement in\n * @param hostScopeId The scope ID that will be used as the class representing the host element\n * @returns CSS with the selector replaced\n */\nconst replaceShadowCssHost = (cssText, hostScopeId) => {\n  return cssText.replace(/-shadowcsshost-no-combinator/g, `.${hostScopeId}`);\n};\nconst scopeCss = (cssText, scopeId, commentOriginalSelector) => {\n  const hostScopeId = scopeId + '-h';\n  const slotScopeId = scopeId + '-s';\n  const commentsWithHash = extractCommentsWithHash(cssText);\n  cssText = stripComments(cssText);\n  const orgSelectors = [];\n  if (commentOriginalSelector) {\n    const processCommentedSelector = rule => {\n      const placeholder = `/*!@___${orgSelectors.length}___*/`;\n      const comment = `/*!@${rule.selector}*/`;\n      orgSelectors.push({\n        placeholder,\n        comment\n      });\n      rule.selector = placeholder + rule.selector;\n      return rule;\n    };\n    cssText = processRules(cssText, rule => {\n      if (rule.selector[0] !== '@') {\n        return processCommentedSelector(rule);\n      } else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') || rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {\n        rule.content = processRules(rule.content, processCommentedSelector);\n        return rule;\n      }\n      return rule;\n    });\n  }\n  const scoped = scopeCssText(cssText, scopeId, hostScopeId, slotScopeId);\n  cssText = [scoped.cssText, ...commentsWithHash].join('\\n');\n  if (commentOriginalSelector) {\n    orgSelectors.forEach(({\n      placeholder,\n      comment\n    }) => {\n      cssText = cssText.replace(placeholder, comment);\n    });\n  }\n  scoped.slottedSelectors.forEach(slottedSelector => {\n    const regex = new RegExp(escapeRegExpSpecialCharacters(slottedSelector.orgSelector), 'g');\n    cssText = cssText.replace(regex, slottedSelector.updatedSelector);\n  });\n  return cssText;\n};\nexport { scopeCss };","map":{"version":3,"names":["escapeRegExpSpecialCharacters","text","replace","safeSelector","selector","placeholders","index","_","keep","replaceBy","push","content","pseudo","exp","ss","restoreSafeSelector","_polyfillHost","_polyfillSlotted","_polyfillHostContext","_parenSuffix","_cssColonHostRe","RegExp","_cssColonHostContextRe","_cssColonSlottedRe","_polyfillHostNoCombinator","_polyfillHostNoCombinatorRe","_shadowDOMSelectorsRe","_selectorReSuffix","_polyfillHostRe","createSupportsRuleRe","_colonSlottedRe","_colonHostRe","_colonHostContextRe","_commentRe","stripComments","input","_commentWithHashRe","extractCommentsWithHash","match","_ruleRe","_curlyRe","_selectorPartsRe","OPEN_CURLY","CLOSE_CURLY","BLOCK_PLACEHOLDER","processRules","ruleCallback","inputWithEscapedBlocks","escapeBlocks","nextBlockIndex","escapedString","m","suffix","contentPrefix","startsWith","blocks","substring","length","cssRule","rule","inputParts","split","resultParts","escapedBlocks","bracketCount","currentBlockParts","partIndex","part","join","strEscapedBlocks","insertPolyfillHostInCssText","cssText","convertColonRule","regExp","partReplacer","parts","r","i","p","trim","colonHostPartReplacer","host","convertColonHost","colonHostContextPartReplacer","indexOf","convertColonSlotted","slotScopeId","slotClass","selectors","compound","slottedSelector","prefixSelector","char","orgSelector","addedSelector","trimEnd","updatedSelector","convertColonHostContext","convertShadowDOMSelectors","reduce","result","pattern","makeScopeMatcher","scopeSelector","lre","rre","selectorNeedsScoping","re","test","injectScopingSelector","scopingSelector","before","_colonGroup","colon","after","applySimpleSelectorScope","hostSelector","lastIndex","applyStrictSelectorScope","isRe","className","_scopeSelectorPart","scopedP","t","safeContent","scopedSelector","startIndex","res","sep","hasHost","shouldScope","exec","separator","slice","scopedPart","scopeSelectorText","slotSelector","map","shallowPart","scopeSelectors","commentOriginalSelector","scopeCssText","scopeId","hostScopeId","slotted","replaceShadowCssHost","slottedSelectors","ref","scopeCss","commentsWithHash","orgSelectors","processCommentedSelector","placeholder","comment","scoped","forEach","regex"],"sources":["C:/Users/clq/Documents/GitHub/Anime-sama-mobile-app/node_modules/@stencil/core/internal/client/shadow-css.js"],"sourcesContent":["/*\n Stencil Client Platform v4.7.2 | MIT Licensed | https://stenciljs.com\n */\n/**\n * Utility function that will escape all regular expression special characters in a string.\n *\n * @param text The string potentially containing special characters.\n * @returns The string with all special characters escaped.\n */\nconst escapeRegExpSpecialCharacters = (text) => {\n    return text.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n};\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n *\n * This file is a port of shadowCSS from `webcomponents.js` to TypeScript.\n * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js\n * https://github.com/angular/angular/blob/master/packages/compiler/src/shadow_css.ts\n */\nconst safeSelector = (selector) => {\n    const placeholders = [];\n    let index = 0;\n    // Replaces attribute selectors with placeholders.\n    // The WS in [attr=\"va lue\"] would otherwise be interpreted as a selector separator.\n    selector = selector.replace(/(\\[[^\\]]*\\])/g, (_, keep) => {\n        const replaceBy = `__ph-${index}__`;\n        placeholders.push(keep);\n        index++;\n        return replaceBy;\n    });\n    // Replaces the expression in `:nth-child(2n + 1)` with a placeholder.\n    // WS and \"+\" would otherwise be interpreted as selector separators.\n    const content = selector.replace(/(:nth-[-\\w]+)(\\([^)]+\\))/g, (_, pseudo, exp) => {\n        const replaceBy = `__ph-${index}__`;\n        placeholders.push(exp);\n        index++;\n        return pseudo + replaceBy;\n    });\n    const ss = {\n        content,\n        placeholders,\n    };\n    return ss;\n};\nconst restoreSafeSelector = (placeholders, content) => {\n    return content.replace(/__ph-(\\d+)__/g, (_, index) => placeholders[+index]);\n};\nconst _polyfillHost = '-shadowcsshost';\nconst _polyfillSlotted = '-shadowcssslotted';\n// note: :host-context pre-processed to -shadowcsshostcontext.\nconst _polyfillHostContext = '-shadowcsscontext';\nconst _parenSuffix = ')(?:\\\\((' + '(?:\\\\([^)(]*\\\\)|[^)(]*)+?' + ')\\\\))?([^,{]*)';\nconst _cssColonHostRe = new RegExp('(' + _polyfillHost + _parenSuffix, 'gim');\nconst _cssColonHostContextRe = new RegExp('(' + _polyfillHostContext + _parenSuffix, 'gim');\nconst _cssColonSlottedRe = new RegExp('(' + _polyfillSlotted + _parenSuffix, 'gim');\nconst _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';\nconst _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\\s]*)/;\nconst _shadowDOMSelectorsRe = [/::shadow/g, /::content/g];\nconst _selectorReSuffix = '([>\\\\s~+[.,{:][\\\\s\\\\S]*)?$';\nconst _polyfillHostRe = /-shadowcsshost/gim;\n/**\n * Little helper for generating a regex that will match a specified\n * CSS selector when that selector is _not_ a part of a `@supports` rule.\n *\n * The pattern will match the provided `selector` (i.e. ':host', ':host-context', etc.)\n * when that selector is not a part of a `@supports` selector rule _or_ if the selector\n * is a part of the rule's declaration.\n *\n * For instance, if we create the regex with the selector ':host-context':\n * - '@supports selector(:host-context())' will return no matches (starts with '@supports')\n * - '@supports selector(:host-context()) { :host-context() { ... }}' will match the second ':host-context' (part of declaration)\n * - ':host-context() { ... }' will match ':host-context' (selector is not a '@supports' rule)\n * - ':host() { ... }' will return no matches (selector doesn't match selector used to create regex)\n *\n * @param selector The CSS selector we want to match for replacement\n * @returns A look-behind regex containing the selector\n */\nconst createSupportsRuleRe = (selector) => new RegExp(`((?<!(^@supports(.*)))|(?<=\\{.*))(${selector}\\\\b)`, 'gim');\nconst _colonSlottedRe = createSupportsRuleRe('::slotted');\nconst _colonHostRe = createSupportsRuleRe(':host');\nconst _colonHostContextRe = createSupportsRuleRe(':host-context');\nconst _commentRe = /\\/\\*\\s*[\\s\\S]*?\\*\\//g;\nconst stripComments = (input) => {\n    return input.replace(_commentRe, '');\n};\nconst _commentWithHashRe = /\\/\\*\\s*#\\s*source(Mapping)?URL=[\\s\\S]+?\\*\\//g;\nconst extractCommentsWithHash = (input) => {\n    return input.match(_commentWithHashRe) || [];\n};\nconst _ruleRe = /(\\s*)([^;\\{\\}]+?)(\\s*)((?:{%BLOCK%}?\\s*;?)|(?:\\s*;))/g;\nconst _curlyRe = /([{}])/g;\nconst _selectorPartsRe = /(^.*?[^\\\\])??((:+)(.*)|$)/;\nconst OPEN_CURLY = '{';\nconst CLOSE_CURLY = '}';\nconst BLOCK_PLACEHOLDER = '%BLOCK%';\nconst processRules = (input, ruleCallback) => {\n    const inputWithEscapedBlocks = escapeBlocks(input);\n    let nextBlockIndex = 0;\n    return inputWithEscapedBlocks.escapedString.replace(_ruleRe, (...m) => {\n        const selector = m[2];\n        let content = '';\n        let suffix = m[4];\n        let contentPrefix = '';\n        if (suffix && suffix.startsWith('{' + BLOCK_PLACEHOLDER)) {\n            content = inputWithEscapedBlocks.blocks[nextBlockIndex++];\n            suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);\n            contentPrefix = '{';\n        }\n        const cssRule = {\n            selector,\n            content,\n        };\n        const rule = ruleCallback(cssRule);\n        return `${m[1]}${rule.selector}${m[3]}${contentPrefix}${rule.content}${suffix}`;\n    });\n};\nconst escapeBlocks = (input) => {\n    const inputParts = input.split(_curlyRe);\n    const resultParts = [];\n    const escapedBlocks = [];\n    let bracketCount = 0;\n    let currentBlockParts = [];\n    for (let partIndex = 0; partIndex < inputParts.length; partIndex++) {\n        const part = inputParts[partIndex];\n        if (part === CLOSE_CURLY) {\n            bracketCount--;\n        }\n        if (bracketCount > 0) {\n            currentBlockParts.push(part);\n        }\n        else {\n            if (currentBlockParts.length > 0) {\n                escapedBlocks.push(currentBlockParts.join(''));\n                resultParts.push(BLOCK_PLACEHOLDER);\n                currentBlockParts = [];\n            }\n            resultParts.push(part);\n        }\n        if (part === OPEN_CURLY) {\n            bracketCount++;\n        }\n    }\n    if (currentBlockParts.length > 0) {\n        escapedBlocks.push(currentBlockParts.join(''));\n        resultParts.push(BLOCK_PLACEHOLDER);\n    }\n    const strEscapedBlocks = {\n        escapedString: resultParts.join(''),\n        blocks: escapedBlocks,\n    };\n    return strEscapedBlocks;\n};\n/**\n * Replaces certain strings within the CSS with placeholders\n * that will later be replaced with class selectors appropriate\n * for the level of encapsulation (shadow or scoped).\n *\n * When performing these replacements, we want to ignore selectors that are a\n * part of an `@supports` rule. Replacing these selectors will result in invalid\n * CSS that gets passed to autoprefixer/postcss once the placeholders are replaced.\n * For example, a rule like:\n *\n * ```css\n * @supports selector(:host()) {\n *   :host {\n *     color: red;\n *   }\n * }\n * ```\n *\n * Should be converted to:\n *\n * ```css\n * @supports selector(:host()) {\n *   -shadowcsshost {\n *     color: red;\n *   }\n * }\n * ```\n *\n * The order the regex replacements happen in matters since we match\n * against a whole selector word so we need to match all of `:host-context`\n * before we try to replace `:host`. Otherwise the pattern for `:host` would match\n * `:host-context` resulting in something like `:-shadowcsshost-context`.\n *\n * @param cssText A CSS string for a component\n * @returns The modified CSS string\n */\nconst insertPolyfillHostInCssText = (cssText) => {\n    // These replacements use a special syntax with the `$1`. When the replacement\n    // occurs, `$1` maps to the content of the string leading up to the selector\n    // to be replaced.\n    //\n    // Otherwise, we will replace all the preceding content in addition to the\n    // selector because of the lookbehind in the regex.\n    //\n    // e.g. `/*!@___0___*/:host {}` => `/*!@___0___*/--shadowcsshost {}`\n    cssText = cssText\n        .replace(_colonHostContextRe, `$1${_polyfillHostContext}`)\n        .replace(_colonHostRe, `$1${_polyfillHost}`)\n        .replace(_colonSlottedRe, `$1${_polyfillSlotted}`);\n    return cssText;\n};\nconst convertColonRule = (cssText, regExp, partReplacer) => {\n    // m[1] = :host(-context), m[2] = contents of (), m[3] rest of rule\n    return cssText.replace(regExp, (...m) => {\n        if (m[2]) {\n            const parts = m[2].split(',');\n            const r = [];\n            for (let i = 0; i < parts.length; i++) {\n                const p = parts[i].trim();\n                if (!p)\n                    break;\n                r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));\n            }\n            return r.join(',');\n        }\n        else {\n            return _polyfillHostNoCombinator + m[3];\n        }\n    });\n};\nconst colonHostPartReplacer = (host, part, suffix) => {\n    return host + part.replace(_polyfillHost, '') + suffix;\n};\nconst convertColonHost = (cssText) => {\n    return convertColonRule(cssText, _cssColonHostRe, colonHostPartReplacer);\n};\nconst colonHostContextPartReplacer = (host, part, suffix) => {\n    if (part.indexOf(_polyfillHost) > -1) {\n        return colonHostPartReplacer(host, part, suffix);\n    }\n    else {\n        return host + part + suffix + ', ' + part + ' ' + host + suffix;\n    }\n};\nconst convertColonSlotted = (cssText, slotScopeId) => {\n    const slotClass = '.' + slotScopeId + ' > ';\n    const selectors = [];\n    cssText = cssText.replace(_cssColonSlottedRe, (...m) => {\n        if (m[2]) {\n            const compound = m[2].trim();\n            const suffix = m[3];\n            const slottedSelector = slotClass + compound + suffix;\n            let prefixSelector = '';\n            for (let i = m[4] - 1; i >= 0; i--) {\n                const char = m[5][i];\n                if (char === '}' || char === ',') {\n                    break;\n                }\n                prefixSelector = char + prefixSelector;\n            }\n            const orgSelector = (prefixSelector + slottedSelector).trim();\n            const addedSelector = `${prefixSelector.trimEnd()}${slottedSelector.trim()}`.trim();\n            if (orgSelector !== addedSelector) {\n                const updatedSelector = `${addedSelector}, ${orgSelector}`;\n                selectors.push({\n                    orgSelector,\n                    updatedSelector,\n                });\n            }\n            return slottedSelector;\n        }\n        else {\n            return _polyfillHostNoCombinator + m[3];\n        }\n    });\n    return {\n        selectors,\n        cssText,\n    };\n};\nconst convertColonHostContext = (cssText) => {\n    return convertColonRule(cssText, _cssColonHostContextRe, colonHostContextPartReplacer);\n};\nconst convertShadowDOMSelectors = (cssText) => {\n    return _shadowDOMSelectorsRe.reduce((result, pattern) => result.replace(pattern, ' '), cssText);\n};\nconst makeScopeMatcher = (scopeSelector) => {\n    const lre = /\\[/g;\n    const rre = /\\]/g;\n    scopeSelector = scopeSelector.replace(lre, '\\\\[').replace(rre, '\\\\]');\n    return new RegExp('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');\n};\nconst selectorNeedsScoping = (selector, scopeSelector) => {\n    const re = makeScopeMatcher(scopeSelector);\n    return !re.test(selector);\n};\nconst injectScopingSelector = (selector, scopingSelector) => {\n    return selector.replace(_selectorPartsRe, (_, before = '', _colonGroup, colon = '', after = '') => {\n        return before + scopingSelector + colon + after;\n    });\n};\nconst applySimpleSelectorScope = (selector, scopeSelector, hostSelector) => {\n    // In Android browser, the lastIndex is not reset when the regex is used in String.replace()\n    _polyfillHostRe.lastIndex = 0;\n    if (_polyfillHostRe.test(selector)) {\n        const replaceBy = `.${hostSelector}`;\n        return selector\n            .replace(_polyfillHostNoCombinatorRe, (_, selector) => injectScopingSelector(selector, replaceBy))\n            .replace(_polyfillHostRe, replaceBy + ' ');\n    }\n    return scopeSelector + ' ' + selector;\n};\nconst applyStrictSelectorScope = (selector, scopeSelector, hostSelector) => {\n    const isRe = /\\[is=([^\\]]*)\\]/g;\n    scopeSelector = scopeSelector.replace(isRe, (_, ...parts) => parts[0]);\n    const className = '.' + scopeSelector;\n    const _scopeSelectorPart = (p) => {\n        let scopedP = p.trim();\n        if (!scopedP) {\n            return '';\n        }\n        if (p.indexOf(_polyfillHostNoCombinator) > -1) {\n            scopedP = applySimpleSelectorScope(p, scopeSelector, hostSelector);\n        }\n        else {\n            // remove :host since it should be unnecessary\n            const t = p.replace(_polyfillHostRe, '');\n            if (t.length > 0) {\n                scopedP = injectScopingSelector(t, className);\n            }\n        }\n        return scopedP;\n    };\n    const safeContent = safeSelector(selector);\n    selector = safeContent.content;\n    let scopedSelector = '';\n    let startIndex = 0;\n    let res;\n    const sep = /( |>|\\+|~(?!=))\\s*/g;\n    // If a selector appears before :host it should not be shimmed as it\n    // matches on ancestor elements and not on elements in the host's shadow\n    // `:host-context(div)` is transformed to\n    // `-shadowcsshost-no-combinatordiv, div -shadowcsshost-no-combinator`\n    // the `div` is not part of the component in the 2nd selectors and should not be scoped.\n    // Historically `component-tag:host` was matching the component so we also want to preserve\n    // this behavior to avoid breaking legacy apps (it should not match).\n    // The behavior should be:\n    // - `tag:host` -> `tag[h]` (this is to avoid breaking legacy apps, should not match anything)\n    // - `tag :host` -> `tag [h]` (`tag` is not scoped because it's considered part of a\n    //   `:host-context(tag)`)\n    const hasHost = selector.indexOf(_polyfillHostNoCombinator) > -1;\n    // Only scope parts after the first `-shadowcsshost-no-combinator` when it is present\n    let shouldScope = !hasHost;\n    while ((res = sep.exec(selector)) !== null) {\n        const separator = res[1];\n        const part = selector.slice(startIndex, res.index).trim();\n        shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n        const scopedPart = shouldScope ? _scopeSelectorPart(part) : part;\n        scopedSelector += `${scopedPart} ${separator} `;\n        startIndex = sep.lastIndex;\n    }\n    const part = selector.substring(startIndex);\n    shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n    scopedSelector += shouldScope ? _scopeSelectorPart(part) : part;\n    // replace the placeholders with their original values\n    return restoreSafeSelector(safeContent.placeholders, scopedSelector);\n};\nconst scopeSelector = (selector, scopeSelectorText, hostSelector, slotSelector) => {\n    return selector\n        .split(',')\n        .map((shallowPart) => {\n        if (slotSelector && shallowPart.indexOf('.' + slotSelector) > -1) {\n            return shallowPart.trim();\n        }\n        if (selectorNeedsScoping(shallowPart, scopeSelectorText)) {\n            return applyStrictSelectorScope(shallowPart, scopeSelectorText, hostSelector).trim();\n        }\n        else {\n            return shallowPart.trim();\n        }\n    })\n        .join(', ');\n};\nconst scopeSelectors = (cssText, scopeSelectorText, hostSelector, slotSelector, commentOriginalSelector) => {\n    return processRules(cssText, (rule) => {\n        let selector = rule.selector;\n        let content = rule.content;\n        if (rule.selector[0] !== '@') {\n            selector = scopeSelector(rule.selector, scopeSelectorText, hostSelector, slotSelector);\n        }\n        else if (rule.selector.startsWith('@media') ||\n            rule.selector.startsWith('@supports') ||\n            rule.selector.startsWith('@page') ||\n            rule.selector.startsWith('@document')) {\n            content = scopeSelectors(rule.content, scopeSelectorText, hostSelector, slotSelector);\n        }\n        const cssRule = {\n            selector: selector.replace(/\\s{2,}/g, ' ').trim(),\n            content,\n        };\n        return cssRule;\n    });\n};\nconst scopeCssText = (cssText, scopeId, hostScopeId, slotScopeId, commentOriginalSelector) => {\n    cssText = insertPolyfillHostInCssText(cssText);\n    cssText = convertColonHost(cssText);\n    cssText = convertColonHostContext(cssText);\n    const slotted = convertColonSlotted(cssText, slotScopeId);\n    cssText = slotted.cssText;\n    cssText = convertShadowDOMSelectors(cssText);\n    if (scopeId) {\n        cssText = scopeSelectors(cssText, scopeId, hostScopeId, slotScopeId);\n    }\n    cssText = replaceShadowCssHost(cssText, hostScopeId);\n    cssText = cssText.replace(/>\\s*\\*\\s+([^{, ]+)/gm, ' $1 ');\n    return {\n        cssText: cssText.trim(),\n        // We need to replace the shadow CSS host string in each of these selectors since we created\n        // them prior to the replacement happening in the components CSS text.\n        slottedSelectors: slotted.selectors.map((ref) => ({\n            orgSelector: replaceShadowCssHost(ref.orgSelector, hostScopeId),\n            updatedSelector: replaceShadowCssHost(ref.updatedSelector, hostScopeId),\n        })),\n    };\n};\n/**\n * Helper function that replaces the interim string representing a `:host` selector with\n * the host scope selector class for the element.\n *\n * @param cssText The CSS string to make the replacement in\n * @param hostScopeId The scope ID that will be used as the class representing the host element\n * @returns CSS with the selector replaced\n */\nconst replaceShadowCssHost = (cssText, hostScopeId) => {\n    return cssText.replace(/-shadowcsshost-no-combinator/g, `.${hostScopeId}`);\n};\nconst scopeCss = (cssText, scopeId, commentOriginalSelector) => {\n    const hostScopeId = scopeId + '-h';\n    const slotScopeId = scopeId + '-s';\n    const commentsWithHash = extractCommentsWithHash(cssText);\n    cssText = stripComments(cssText);\n    const orgSelectors = [];\n    if (commentOriginalSelector) {\n        const processCommentedSelector = (rule) => {\n            const placeholder = `/*!@___${orgSelectors.length}___*/`;\n            const comment = `/*!@${rule.selector}*/`;\n            orgSelectors.push({ placeholder, comment });\n            rule.selector = placeholder + rule.selector;\n            return rule;\n        };\n        cssText = processRules(cssText, (rule) => {\n            if (rule.selector[0] !== '@') {\n                return processCommentedSelector(rule);\n            }\n            else if (rule.selector.startsWith('@media') ||\n                rule.selector.startsWith('@supports') ||\n                rule.selector.startsWith('@page') ||\n                rule.selector.startsWith('@document')) {\n                rule.content = processRules(rule.content, processCommentedSelector);\n                return rule;\n            }\n            return rule;\n        });\n    }\n    const scoped = scopeCssText(cssText, scopeId, hostScopeId, slotScopeId);\n    cssText = [scoped.cssText, ...commentsWithHash].join('\\n');\n    if (commentOriginalSelector) {\n        orgSelectors.forEach(({ placeholder, comment }) => {\n            cssText = cssText.replace(placeholder, comment);\n        });\n    }\n    scoped.slottedSelectors.forEach((slottedSelector) => {\n        const regex = new RegExp(escapeRegExpSpecialCharacters(slottedSelector.orgSelector), 'g');\n        cssText = cssText.replace(regex, slottedSelector.updatedSelector);\n    });\n    return cssText;\n};\n\nexport { scopeCss };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,6BAA6B,GAAIC,IAAI,IAAK;EAC5C,OAAOA,IAAI,CAACC,OAAO,CAAC,qBAAqB,EAAE,MAAM,CAAC;AACtD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,YAAY,GAAIC,QAAQ,IAAK;EAC/B,MAAMC,YAAY,GAAG,EAAE;EACvB,IAAIC,KAAK,GAAG,CAAC;EACb;EACA;EACAF,QAAQ,GAAGA,QAAQ,CAACF,OAAO,CAAC,eAAe,EAAE,CAACK,CAAC,EAAEC,IAAI,KAAK;IACtD,MAAMC,SAAS,GAAI,QAAOH,KAAM,IAAG;IACnCD,YAAY,CAACK,IAAI,CAACF,IAAI,CAAC;IACvBF,KAAK,EAAE;IACP,OAAOG,SAAS;EACpB,CAAC,CAAC;EACF;EACA;EACA,MAAME,OAAO,GAAGP,QAAQ,CAACF,OAAO,CAAC,2BAA2B,EAAE,CAACK,CAAC,EAAEK,MAAM,EAAEC,GAAG,KAAK;IAC9E,MAAMJ,SAAS,GAAI,QAAOH,KAAM,IAAG;IACnCD,YAAY,CAACK,IAAI,CAACG,GAAG,CAAC;IACtBP,KAAK,EAAE;IACP,OAAOM,MAAM,GAAGH,SAAS;EAC7B,CAAC,CAAC;EACF,MAAMK,EAAE,GAAG;IACPH,OAAO;IACPN;EACJ,CAAC;EACD,OAAOS,EAAE;AACb,CAAC;AACD,MAAMC,mBAAmB,GAAGA,CAACV,YAAY,EAAEM,OAAO,KAAK;EACnD,OAAOA,OAAO,CAACT,OAAO,CAAC,eAAe,EAAE,CAACK,CAAC,EAAED,KAAK,KAAKD,YAAY,CAAC,CAACC,KAAK,CAAC,CAAC;AAC/E,CAAC;AACD,MAAMU,aAAa,GAAG,gBAAgB;AACtC,MAAMC,gBAAgB,GAAG,mBAAmB;AAC5C;AACA,MAAMC,oBAAoB,GAAG,mBAAmB;AAChD,MAAMC,YAAY,GAAG,UAAU,GAAG,2BAA2B,GAAG,gBAAgB;AAChF,MAAMC,eAAe,GAAG,IAAIC,MAAM,CAAC,GAAG,GAAGL,aAAa,GAAGG,YAAY,EAAE,KAAK,CAAC;AAC7E,MAAMG,sBAAsB,GAAG,IAAID,MAAM,CAAC,GAAG,GAAGH,oBAAoB,GAAGC,YAAY,EAAE,KAAK,CAAC;AAC3F,MAAMI,kBAAkB,GAAG,IAAIF,MAAM,CAAC,GAAG,GAAGJ,gBAAgB,GAAGE,YAAY,EAAE,KAAK,CAAC;AACnF,MAAMK,yBAAyB,GAAGR,aAAa,GAAG,gBAAgB;AAClE,MAAMS,2BAA2B,GAAG,sCAAsC;AAC1E,MAAMC,qBAAqB,GAAG,CAAC,WAAW,EAAE,YAAY,CAAC;AACzD,MAAMC,iBAAiB,GAAG,4BAA4B;AACtD,MAAMC,eAAe,GAAG,mBAAmB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,oBAAoB,GAAIzB,QAAQ,IAAK,IAAIiB,MAAM,CAAE,qCAAoCjB,QAAS,MAAK,EAAE,KAAK,CAAC;AACjH,MAAM0B,eAAe,GAAGD,oBAAoB,CAAC,WAAW,CAAC;AACzD,MAAME,YAAY,GAAGF,oBAAoB,CAAC,OAAO,CAAC;AAClD,MAAMG,mBAAmB,GAAGH,oBAAoB,CAAC,eAAe,CAAC;AACjE,MAAMI,UAAU,GAAG,sBAAsB;AACzC,MAAMC,aAAa,GAAIC,KAAK,IAAK;EAC7B,OAAOA,KAAK,CAACjC,OAAO,CAAC+B,UAAU,EAAE,EAAE,CAAC;AACxC,CAAC;AACD,MAAMG,kBAAkB,GAAG,8CAA8C;AACzE,MAAMC,uBAAuB,GAAIF,KAAK,IAAK;EACvC,OAAOA,KAAK,CAACG,KAAK,CAACF,kBAAkB,CAAC,IAAI,EAAE;AAChD,CAAC;AACD,MAAMG,OAAO,GAAG,uDAAuD;AACvE,MAAMC,QAAQ,GAAG,SAAS;AAC1B,MAAMC,gBAAgB,GAAG,2BAA2B;AACpD,MAAMC,UAAU,GAAG,GAAG;AACtB,MAAMC,WAAW,GAAG,GAAG;AACvB,MAAMC,iBAAiB,GAAG,SAAS;AACnC,MAAMC,YAAY,GAAGA,CAACV,KAAK,EAAEW,YAAY,KAAK;EAC1C,MAAMC,sBAAsB,GAAGC,YAAY,CAACb,KAAK,CAAC;EAClD,IAAIc,cAAc,GAAG,CAAC;EACtB,OAAOF,sBAAsB,CAACG,aAAa,CAAChD,OAAO,CAACqC,OAAO,EAAE,CAAC,GAAGY,CAAC,KAAK;IACnE,MAAM/C,QAAQ,GAAG+C,CAAC,CAAC,CAAC,CAAC;IACrB,IAAIxC,OAAO,GAAG,EAAE;IAChB,IAAIyC,MAAM,GAAGD,CAAC,CAAC,CAAC,CAAC;IACjB,IAAIE,aAAa,GAAG,EAAE;IACtB,IAAID,MAAM,IAAIA,MAAM,CAACE,UAAU,CAAC,GAAG,GAAGV,iBAAiB,CAAC,EAAE;MACtDjC,OAAO,GAAGoC,sBAAsB,CAACQ,MAAM,CAACN,cAAc,EAAE,CAAC;MACzDG,MAAM,GAAGA,MAAM,CAACI,SAAS,CAACZ,iBAAiB,CAACa,MAAM,GAAG,CAAC,CAAC;MACvDJ,aAAa,GAAG,GAAG;IACvB;IACA,MAAMK,OAAO,GAAG;MACZtD,QAAQ;MACRO;IACJ,CAAC;IACD,MAAMgD,IAAI,GAAGb,YAAY,CAACY,OAAO,CAAC;IAClC,OAAQ,GAAEP,CAAC,CAAC,CAAC,CAAE,GAAEQ,IAAI,CAACvD,QAAS,GAAE+C,CAAC,CAAC,CAAC,CAAE,GAAEE,aAAc,GAAEM,IAAI,CAAChD,OAAQ,GAAEyC,MAAO,EAAC;EACnF,CAAC,CAAC;AACN,CAAC;AACD,MAAMJ,YAAY,GAAIb,KAAK,IAAK;EAC5B,MAAMyB,UAAU,GAAGzB,KAAK,CAAC0B,KAAK,CAACrB,QAAQ,CAAC;EACxC,MAAMsB,WAAW,GAAG,EAAE;EACtB,MAAMC,aAAa,GAAG,EAAE;EACxB,IAAIC,YAAY,GAAG,CAAC;EACpB,IAAIC,iBAAiB,GAAG,EAAE;EAC1B,KAAK,IAAIC,SAAS,GAAG,CAAC,EAAEA,SAAS,GAAGN,UAAU,CAACH,MAAM,EAAES,SAAS,EAAE,EAAE;IAChE,MAAMC,IAAI,GAAGP,UAAU,CAACM,SAAS,CAAC;IAClC,IAAIC,IAAI,KAAKxB,WAAW,EAAE;MACtBqB,YAAY,EAAE;IAClB;IACA,IAAIA,YAAY,GAAG,CAAC,EAAE;MAClBC,iBAAiB,CAACvD,IAAI,CAACyD,IAAI,CAAC;IAChC,CAAC,MACI;MACD,IAAIF,iBAAiB,CAACR,MAAM,GAAG,CAAC,EAAE;QAC9BM,aAAa,CAACrD,IAAI,CAACuD,iBAAiB,CAACG,IAAI,CAAC,EAAE,CAAC,CAAC;QAC9CN,WAAW,CAACpD,IAAI,CAACkC,iBAAiB,CAAC;QACnCqB,iBAAiB,GAAG,EAAE;MAC1B;MACAH,WAAW,CAACpD,IAAI,CAACyD,IAAI,CAAC;IAC1B;IACA,IAAIA,IAAI,KAAKzB,UAAU,EAAE;MACrBsB,YAAY,EAAE;IAClB;EACJ;EACA,IAAIC,iBAAiB,CAACR,MAAM,GAAG,CAAC,EAAE;IAC9BM,aAAa,CAACrD,IAAI,CAACuD,iBAAiB,CAACG,IAAI,CAAC,EAAE,CAAC,CAAC;IAC9CN,WAAW,CAACpD,IAAI,CAACkC,iBAAiB,CAAC;EACvC;EACA,MAAMyB,gBAAgB,GAAG;IACrBnB,aAAa,EAAEY,WAAW,CAACM,IAAI,CAAC,EAAE,CAAC;IACnCb,MAAM,EAAEQ;EACZ,CAAC;EACD,OAAOM,gBAAgB;AAC3B,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,2BAA2B,GAAIC,OAAO,IAAK;EAC7C;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACAA,OAAO,GAAGA,OAAO,CACZrE,OAAO,CAAC8B,mBAAmB,EAAG,KAAId,oBAAqB,EAAC,CAAC,CACzDhB,OAAO,CAAC6B,YAAY,EAAG,KAAIf,aAAc,EAAC,CAAC,CAC3Cd,OAAO,CAAC4B,eAAe,EAAG,KAAIb,gBAAiB,EAAC,CAAC;EACtD,OAAOsD,OAAO;AAClB,CAAC;AACD,MAAMC,gBAAgB,GAAGA,CAACD,OAAO,EAAEE,MAAM,EAAEC,YAAY,KAAK;EACxD;EACA,OAAOH,OAAO,CAACrE,OAAO,CAACuE,MAAM,EAAE,CAAC,GAAGtB,CAAC,KAAK;IACrC,IAAIA,CAAC,CAAC,CAAC,CAAC,EAAE;MACN,MAAMwB,KAAK,GAAGxB,CAAC,CAAC,CAAC,CAAC,CAACU,KAAK,CAAC,GAAG,CAAC;MAC7B,MAAMe,CAAC,GAAG,EAAE;MACZ,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,KAAK,CAAClB,MAAM,EAAEoB,CAAC,EAAE,EAAE;QACnC,MAAMC,CAAC,GAAGH,KAAK,CAACE,CAAC,CAAC,CAACE,IAAI,CAAC,CAAC;QACzB,IAAI,CAACD,CAAC,EACF;QACJF,CAAC,CAAClE,IAAI,CAACgE,YAAY,CAAClD,yBAAyB,EAAEsD,CAAC,EAAE3B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MAC5D;MACA,OAAOyB,CAAC,CAACR,IAAI,CAAC,GAAG,CAAC;IACtB,CAAC,MACI;MACD,OAAO5C,yBAAyB,GAAG2B,CAAC,CAAC,CAAC,CAAC;IAC3C;EACJ,CAAC,CAAC;AACN,CAAC;AACD,MAAM6B,qBAAqB,GAAGA,CAACC,IAAI,EAAEd,IAAI,EAAEf,MAAM,KAAK;EAClD,OAAO6B,IAAI,GAAGd,IAAI,CAACjE,OAAO,CAACc,aAAa,EAAE,EAAE,CAAC,GAAGoC,MAAM;AAC1D,CAAC;AACD,MAAM8B,gBAAgB,GAAIX,OAAO,IAAK;EAClC,OAAOC,gBAAgB,CAACD,OAAO,EAAEnD,eAAe,EAAE4D,qBAAqB,CAAC;AAC5E,CAAC;AACD,MAAMG,4BAA4B,GAAGA,CAACF,IAAI,EAAEd,IAAI,EAAEf,MAAM,KAAK;EACzD,IAAIe,IAAI,CAACiB,OAAO,CAACpE,aAAa,CAAC,GAAG,CAAC,CAAC,EAAE;IAClC,OAAOgE,qBAAqB,CAACC,IAAI,EAAEd,IAAI,EAAEf,MAAM,CAAC;EACpD,CAAC,MACI;IACD,OAAO6B,IAAI,GAAGd,IAAI,GAAGf,MAAM,GAAG,IAAI,GAAGe,IAAI,GAAG,GAAG,GAAGc,IAAI,GAAG7B,MAAM;EACnE;AACJ,CAAC;AACD,MAAMiC,mBAAmB,GAAGA,CAACd,OAAO,EAAEe,WAAW,KAAK;EAClD,MAAMC,SAAS,GAAG,GAAG,GAAGD,WAAW,GAAG,KAAK;EAC3C,MAAME,SAAS,GAAG,EAAE;EACpBjB,OAAO,GAAGA,OAAO,CAACrE,OAAO,CAACqB,kBAAkB,EAAE,CAAC,GAAG4B,CAAC,KAAK;IACpD,IAAIA,CAAC,CAAC,CAAC,CAAC,EAAE;MACN,MAAMsC,QAAQ,GAAGtC,CAAC,CAAC,CAAC,CAAC,CAAC4B,IAAI,CAAC,CAAC;MAC5B,MAAM3B,MAAM,GAAGD,CAAC,CAAC,CAAC,CAAC;MACnB,MAAMuC,eAAe,GAAGH,SAAS,GAAGE,QAAQ,GAAGrC,MAAM;MACrD,IAAIuC,cAAc,GAAG,EAAE;MACvB,KAAK,IAAId,CAAC,GAAG1B,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE0B,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;QAChC,MAAMe,IAAI,GAAGzC,CAAC,CAAC,CAAC,CAAC,CAAC0B,CAAC,CAAC;QACpB,IAAIe,IAAI,KAAK,GAAG,IAAIA,IAAI,KAAK,GAAG,EAAE;UAC9B;QACJ;QACAD,cAAc,GAAGC,IAAI,GAAGD,cAAc;MAC1C;MACA,MAAME,WAAW,GAAG,CAACF,cAAc,GAAGD,eAAe,EAAEX,IAAI,CAAC,CAAC;MAC7D,MAAMe,aAAa,GAAI,GAAEH,cAAc,CAACI,OAAO,CAAC,CAAE,GAAEL,eAAe,CAACX,IAAI,CAAC,CAAE,EAAC,CAACA,IAAI,CAAC,CAAC;MACnF,IAAIc,WAAW,KAAKC,aAAa,EAAE;QAC/B,MAAME,eAAe,GAAI,GAAEF,aAAc,KAAID,WAAY,EAAC;QAC1DL,SAAS,CAAC9E,IAAI,CAAC;UACXmF,WAAW;UACXG;QACJ,CAAC,CAAC;MACN;MACA,OAAON,eAAe;IAC1B,CAAC,MACI;MACD,OAAOlE,yBAAyB,GAAG2B,CAAC,CAAC,CAAC,CAAC;IAC3C;EACJ,CAAC,CAAC;EACF,OAAO;IACHqC,SAAS;IACTjB;EACJ,CAAC;AACL,CAAC;AACD,MAAM0B,uBAAuB,GAAI1B,OAAO,IAAK;EACzC,OAAOC,gBAAgB,CAACD,OAAO,EAAEjD,sBAAsB,EAAE6D,4BAA4B,CAAC;AAC1F,CAAC;AACD,MAAMe,yBAAyB,GAAI3B,OAAO,IAAK;EAC3C,OAAO7C,qBAAqB,CAACyE,MAAM,CAAC,CAACC,MAAM,EAAEC,OAAO,KAAKD,MAAM,CAAClG,OAAO,CAACmG,OAAO,EAAE,GAAG,CAAC,EAAE9B,OAAO,CAAC;AACnG,CAAC;AACD,MAAM+B,gBAAgB,GAAIC,aAAa,IAAK;EACxC,MAAMC,GAAG,GAAG,KAAK;EACjB,MAAMC,GAAG,GAAG,KAAK;EACjBF,aAAa,GAAGA,aAAa,CAACrG,OAAO,CAACsG,GAAG,EAAE,KAAK,CAAC,CAACtG,OAAO,CAACuG,GAAG,EAAE,KAAK,CAAC;EACrE,OAAO,IAAIpF,MAAM,CAAC,IAAI,GAAGkF,aAAa,GAAG,GAAG,GAAG5E,iBAAiB,EAAE,GAAG,CAAC;AAC1E,CAAC;AACD,MAAM+E,oBAAoB,GAAGA,CAACtG,QAAQ,EAAEmG,aAAa,KAAK;EACtD,MAAMI,EAAE,GAAGL,gBAAgB,CAACC,aAAa,CAAC;EAC1C,OAAO,CAACI,EAAE,CAACC,IAAI,CAACxG,QAAQ,CAAC;AAC7B,CAAC;AACD,MAAMyG,qBAAqB,GAAGA,CAACzG,QAAQ,EAAE0G,eAAe,KAAK;EACzD,OAAO1G,QAAQ,CAACF,OAAO,CAACuC,gBAAgB,EAAE,CAAClC,CAAC,EAAEwG,MAAM,GAAG,EAAE,EAAEC,WAAW,EAAEC,KAAK,GAAG,EAAE,EAAEC,KAAK,GAAG,EAAE,KAAK;IAC/F,OAAOH,MAAM,GAAGD,eAAe,GAAGG,KAAK,GAAGC,KAAK;EACnD,CAAC,CAAC;AACN,CAAC;AACD,MAAMC,wBAAwB,GAAGA,CAAC/G,QAAQ,EAAEmG,aAAa,EAAEa,YAAY,KAAK;EACxE;EACAxF,eAAe,CAACyF,SAAS,GAAG,CAAC;EAC7B,IAAIzF,eAAe,CAACgF,IAAI,CAACxG,QAAQ,CAAC,EAAE;IAChC,MAAMK,SAAS,GAAI,IAAG2G,YAAa,EAAC;IACpC,OAAOhH,QAAQ,CACVF,OAAO,CAACuB,2BAA2B,EAAE,CAAClB,CAAC,EAAEH,QAAQ,KAAKyG,qBAAqB,CAACzG,QAAQ,EAAEK,SAAS,CAAC,CAAC,CACjGP,OAAO,CAAC0B,eAAe,EAAEnB,SAAS,GAAG,GAAG,CAAC;EAClD;EACA,OAAO8F,aAAa,GAAG,GAAG,GAAGnG,QAAQ;AACzC,CAAC;AACD,MAAMkH,wBAAwB,GAAGA,CAAClH,QAAQ,EAAEmG,aAAa,EAAEa,YAAY,KAAK;EACxE,MAAMG,IAAI,GAAG,kBAAkB;EAC/BhB,aAAa,GAAGA,aAAa,CAACrG,OAAO,CAACqH,IAAI,EAAE,CAAChH,CAAC,EAAE,GAAGoE,KAAK,KAAKA,KAAK,CAAC,CAAC,CAAC,CAAC;EACtE,MAAM6C,SAAS,GAAG,GAAG,GAAGjB,aAAa;EACrC,MAAMkB,kBAAkB,GAAI3C,CAAC,IAAK;IAC9B,IAAI4C,OAAO,GAAG5C,CAAC,CAACC,IAAI,CAAC,CAAC;IACtB,IAAI,CAAC2C,OAAO,EAAE;MACV,OAAO,EAAE;IACb;IACA,IAAI5C,CAAC,CAACM,OAAO,CAAC5D,yBAAyB,CAAC,GAAG,CAAC,CAAC,EAAE;MAC3CkG,OAAO,GAAGP,wBAAwB,CAACrC,CAAC,EAAEyB,aAAa,EAAEa,YAAY,CAAC;IACtE,CAAC,MACI;MACD;MACA,MAAMO,CAAC,GAAG7C,CAAC,CAAC5E,OAAO,CAAC0B,eAAe,EAAE,EAAE,CAAC;MACxC,IAAI+F,CAAC,CAAClE,MAAM,GAAG,CAAC,EAAE;QACdiE,OAAO,GAAGb,qBAAqB,CAACc,CAAC,EAAEH,SAAS,CAAC;MACjD;IACJ;IACA,OAAOE,OAAO;EAClB,CAAC;EACD,MAAME,WAAW,GAAGzH,YAAY,CAACC,QAAQ,CAAC;EAC1CA,QAAQ,GAAGwH,WAAW,CAACjH,OAAO;EAC9B,IAAIkH,cAAc,GAAG,EAAE;EACvB,IAAIC,UAAU,GAAG,CAAC;EAClB,IAAIC,GAAG;EACP,MAAMC,GAAG,GAAG,qBAAqB;EACjC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,MAAMC,OAAO,GAAG7H,QAAQ,CAACgF,OAAO,CAAC5D,yBAAyB,CAAC,GAAG,CAAC,CAAC;EAChE;EACA,IAAI0G,WAAW,GAAG,CAACD,OAAO;EAC1B,OAAO,CAACF,GAAG,GAAGC,GAAG,CAACG,IAAI,CAAC/H,QAAQ,CAAC,MAAM,IAAI,EAAE;IACxC,MAAMgI,SAAS,GAAGL,GAAG,CAAC,CAAC,CAAC;IACxB,MAAM5D,IAAI,GAAG/D,QAAQ,CAACiI,KAAK,CAACP,UAAU,EAAEC,GAAG,CAACzH,KAAK,CAAC,CAACyE,IAAI,CAAC,CAAC;IACzDmD,WAAW,GAAGA,WAAW,IAAI/D,IAAI,CAACiB,OAAO,CAAC5D,yBAAyB,CAAC,GAAG,CAAC,CAAC;IACzE,MAAM8G,UAAU,GAAGJ,WAAW,GAAGT,kBAAkB,CAACtD,IAAI,CAAC,GAAGA,IAAI;IAChE0D,cAAc,IAAK,GAAES,UAAW,IAAGF,SAAU,GAAE;IAC/CN,UAAU,GAAGE,GAAG,CAACX,SAAS;EAC9B;EACA,MAAMlD,IAAI,GAAG/D,QAAQ,CAACoD,SAAS,CAACsE,UAAU,CAAC;EAC3CI,WAAW,GAAGA,WAAW,IAAI/D,IAAI,CAACiB,OAAO,CAAC5D,yBAAyB,CAAC,GAAG,CAAC,CAAC;EACzEqG,cAAc,IAAIK,WAAW,GAAGT,kBAAkB,CAACtD,IAAI,CAAC,GAAGA,IAAI;EAC/D;EACA,OAAOpD,mBAAmB,CAAC6G,WAAW,CAACvH,YAAY,EAAEwH,cAAc,CAAC;AACxE,CAAC;AACD,MAAMtB,aAAa,GAAGA,CAACnG,QAAQ,EAAEmI,iBAAiB,EAAEnB,YAAY,EAAEoB,YAAY,KAAK;EAC/E,OAAOpI,QAAQ,CACVyD,KAAK,CAAC,GAAG,CAAC,CACV4E,GAAG,CAAEC,WAAW,IAAK;IACtB,IAAIF,YAAY,IAAIE,WAAW,CAACtD,OAAO,CAAC,GAAG,GAAGoD,YAAY,CAAC,GAAG,CAAC,CAAC,EAAE;MAC9D,OAAOE,WAAW,CAAC3D,IAAI,CAAC,CAAC;IAC7B;IACA,IAAI2B,oBAAoB,CAACgC,WAAW,EAAEH,iBAAiB,CAAC,EAAE;MACtD,OAAOjB,wBAAwB,CAACoB,WAAW,EAAEH,iBAAiB,EAAEnB,YAAY,CAAC,CAACrC,IAAI,CAAC,CAAC;IACxF,CAAC,MACI;MACD,OAAO2D,WAAW,CAAC3D,IAAI,CAAC,CAAC;IAC7B;EACJ,CAAC,CAAC,CACGX,IAAI,CAAC,IAAI,CAAC;AACnB,CAAC;AACD,MAAMuE,cAAc,GAAGA,CAACpE,OAAO,EAAEgE,iBAAiB,EAAEnB,YAAY,EAAEoB,YAAY,EAAEI,uBAAuB,KAAK;EACxG,OAAO/F,YAAY,CAAC0B,OAAO,EAAGZ,IAAI,IAAK;IACnC,IAAIvD,QAAQ,GAAGuD,IAAI,CAACvD,QAAQ;IAC5B,IAAIO,OAAO,GAAGgD,IAAI,CAAChD,OAAO;IAC1B,IAAIgD,IAAI,CAACvD,QAAQ,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;MAC1BA,QAAQ,GAAGmG,aAAa,CAAC5C,IAAI,CAACvD,QAAQ,EAAEmI,iBAAiB,EAAEnB,YAAY,EAAEoB,YAAY,CAAC;IAC1F,CAAC,MACI,IAAI7E,IAAI,CAACvD,QAAQ,CAACkD,UAAU,CAAC,QAAQ,CAAC,IACvCK,IAAI,CAACvD,QAAQ,CAACkD,UAAU,CAAC,WAAW,CAAC,IACrCK,IAAI,CAACvD,QAAQ,CAACkD,UAAU,CAAC,OAAO,CAAC,IACjCK,IAAI,CAACvD,QAAQ,CAACkD,UAAU,CAAC,WAAW,CAAC,EAAE;MACvC3C,OAAO,GAAGgI,cAAc,CAAChF,IAAI,CAAChD,OAAO,EAAE4H,iBAAiB,EAAEnB,YAAY,EAAEoB,YAAY,CAAC;IACzF;IACA,MAAM9E,OAAO,GAAG;MACZtD,QAAQ,EAAEA,QAAQ,CAACF,OAAO,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC6E,IAAI,CAAC,CAAC;MACjDpE;IACJ,CAAC;IACD,OAAO+C,OAAO;EAClB,CAAC,CAAC;AACN,CAAC;AACD,MAAMmF,YAAY,GAAGA,CAACtE,OAAO,EAAEuE,OAAO,EAAEC,WAAW,EAAEzD,WAAW,EAAEsD,uBAAuB,KAAK;EAC1FrE,OAAO,GAAGD,2BAA2B,CAACC,OAAO,CAAC;EAC9CA,OAAO,GAAGW,gBAAgB,CAACX,OAAO,CAAC;EACnCA,OAAO,GAAG0B,uBAAuB,CAAC1B,OAAO,CAAC;EAC1C,MAAMyE,OAAO,GAAG3D,mBAAmB,CAACd,OAAO,EAAEe,WAAW,CAAC;EACzDf,OAAO,GAAGyE,OAAO,CAACzE,OAAO;EACzBA,OAAO,GAAG2B,yBAAyB,CAAC3B,OAAO,CAAC;EAC5C,IAAIuE,OAAO,EAAE;IACTvE,OAAO,GAAGoE,cAAc,CAACpE,OAAO,EAAEuE,OAAO,EAAEC,WAAW,EAAEzD,WAAW,CAAC;EACxE;EACAf,OAAO,GAAG0E,oBAAoB,CAAC1E,OAAO,EAAEwE,WAAW,CAAC;EACpDxE,OAAO,GAAGA,OAAO,CAACrE,OAAO,CAAC,sBAAsB,EAAE,MAAM,CAAC;EACzD,OAAO;IACHqE,OAAO,EAAEA,OAAO,CAACQ,IAAI,CAAC,CAAC;IACvB;IACA;IACAmE,gBAAgB,EAAEF,OAAO,CAACxD,SAAS,CAACiD,GAAG,CAAEU,GAAG,KAAM;MAC9CtD,WAAW,EAAEoD,oBAAoB,CAACE,GAAG,CAACtD,WAAW,EAAEkD,WAAW,CAAC;MAC/D/C,eAAe,EAAEiD,oBAAoB,CAACE,GAAG,CAACnD,eAAe,EAAE+C,WAAW;IAC1E,CAAC,CAAC;EACN,CAAC;AACL,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAME,oBAAoB,GAAGA,CAAC1E,OAAO,EAAEwE,WAAW,KAAK;EACnD,OAAOxE,OAAO,CAACrE,OAAO,CAAC,+BAA+B,EAAG,IAAG6I,WAAY,EAAC,CAAC;AAC9E,CAAC;AACD,MAAMK,QAAQ,GAAGA,CAAC7E,OAAO,EAAEuE,OAAO,EAAEF,uBAAuB,KAAK;EAC5D,MAAMG,WAAW,GAAGD,OAAO,GAAG,IAAI;EAClC,MAAMxD,WAAW,GAAGwD,OAAO,GAAG,IAAI;EAClC,MAAMO,gBAAgB,GAAGhH,uBAAuB,CAACkC,OAAO,CAAC;EACzDA,OAAO,GAAGrC,aAAa,CAACqC,OAAO,CAAC;EAChC,MAAM+E,YAAY,GAAG,EAAE;EACvB,IAAIV,uBAAuB,EAAE;IACzB,MAAMW,wBAAwB,GAAI5F,IAAI,IAAK;MACvC,MAAM6F,WAAW,GAAI,UAASF,YAAY,CAAC7F,MAAO,OAAM;MACxD,MAAMgG,OAAO,GAAI,OAAM9F,IAAI,CAACvD,QAAS,IAAG;MACxCkJ,YAAY,CAAC5I,IAAI,CAAC;QAAE8I,WAAW;QAAEC;MAAQ,CAAC,CAAC;MAC3C9F,IAAI,CAACvD,QAAQ,GAAGoJ,WAAW,GAAG7F,IAAI,CAACvD,QAAQ;MAC3C,OAAOuD,IAAI;IACf,CAAC;IACDY,OAAO,GAAG1B,YAAY,CAAC0B,OAAO,EAAGZ,IAAI,IAAK;MACtC,IAAIA,IAAI,CAACvD,QAAQ,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;QAC1B,OAAOmJ,wBAAwB,CAAC5F,IAAI,CAAC;MACzC,CAAC,MACI,IAAIA,IAAI,CAACvD,QAAQ,CAACkD,UAAU,CAAC,QAAQ,CAAC,IACvCK,IAAI,CAACvD,QAAQ,CAACkD,UAAU,CAAC,WAAW,CAAC,IACrCK,IAAI,CAACvD,QAAQ,CAACkD,UAAU,CAAC,OAAO,CAAC,IACjCK,IAAI,CAACvD,QAAQ,CAACkD,UAAU,CAAC,WAAW,CAAC,EAAE;QACvCK,IAAI,CAAChD,OAAO,GAAGkC,YAAY,CAACc,IAAI,CAAChD,OAAO,EAAE4I,wBAAwB,CAAC;QACnE,OAAO5F,IAAI;MACf;MACA,OAAOA,IAAI;IACf,CAAC,CAAC;EACN;EACA,MAAM+F,MAAM,GAAGb,YAAY,CAACtE,OAAO,EAAEuE,OAAO,EAAEC,WAAW,EAAEzD,WAAW,CAAC;EACvEf,OAAO,GAAG,CAACmF,MAAM,CAACnF,OAAO,EAAE,GAAG8E,gBAAgB,CAAC,CAACjF,IAAI,CAAC,IAAI,CAAC;EAC1D,IAAIwE,uBAAuB,EAAE;IACzBU,YAAY,CAACK,OAAO,CAAC,CAAC;MAAEH,WAAW;MAAEC;IAAQ,CAAC,KAAK;MAC/ClF,OAAO,GAAGA,OAAO,CAACrE,OAAO,CAACsJ,WAAW,EAAEC,OAAO,CAAC;IACnD,CAAC,CAAC;EACN;EACAC,MAAM,CAACR,gBAAgB,CAACS,OAAO,CAAEjE,eAAe,IAAK;IACjD,MAAMkE,KAAK,GAAG,IAAIvI,MAAM,CAACrB,6BAA6B,CAAC0F,eAAe,CAACG,WAAW,CAAC,EAAE,GAAG,CAAC;IACzFtB,OAAO,GAAGA,OAAO,CAACrE,OAAO,CAAC0J,KAAK,EAAElE,eAAe,CAACM,eAAe,CAAC;EACrE,CAAC,CAAC;EACF,OAAOzB,OAAO;AAClB,CAAC;AAED,SAAS6E,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}