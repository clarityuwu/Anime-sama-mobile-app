{"ast":null,"code":"import _asyncToGenerator from \"/Users/raphaelboullay/Documents/GitHub/Anime-sama-mobile-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { WebPlugin } from '@capacitor/core';\nimport { deleteToken, getMessaging, getToken, isSupported as isSupportedInWeb, onMessage } from 'firebase/messaging';\nexport let FirebaseMessagingWeb = /*#__PURE__*/(() => {\n  class FirebaseMessagingWeb extends WebPlugin {\n    constructor() {\n      super();\n      isSupportedInWeb().then(supported => {\n        if (!supported) {\n          return;\n        }\n        const messaging = getMessaging();\n        onMessage(messaging, payload => this.handleNotificationReceived(payload));\n      });\n    }\n    checkPermissions() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        const receive = _this.convertNotificationPermissionToPermissionState(Notification.permission);\n        return {\n          receive\n        };\n      })();\n    }\n    requestPermissions() {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        const notificationPermission = yield Notification.requestPermission();\n        const receive = _this2.convertNotificationPermissionToPermissionState(notificationPermission);\n        return {\n          receive\n        };\n      })();\n    }\n    isSupported() {\n      return _asyncToGenerator(function* () {\n        const isSupported = yield isSupportedInWeb();\n        return {\n          isSupported\n        };\n      })();\n    }\n    getToken(options) {\n      return _asyncToGenerator(function* () {\n        const messaging = getMessaging();\n        const token = yield getToken(messaging, {\n          vapidKey: options.vapidKey,\n          serviceWorkerRegistration: options.serviceWorkerRegistration\n        });\n        return {\n          token\n        };\n      })();\n    }\n    deleteToken() {\n      return _asyncToGenerator(function* () {\n        const messaging = getMessaging();\n        yield deleteToken(messaging);\n      })();\n    }\n    getDeliveredNotifications() {\n      var _this3 = this;\n      return _asyncToGenerator(function* () {\n        _this3.throwUnavailableError();\n      })();\n    }\n    removeDeliveredNotifications(_options) {\n      var _this4 = this;\n      return _asyncToGenerator(function* () {\n        _this4.throwUnavailableError();\n      })();\n    }\n    removeAllDeliveredNotifications() {\n      var _this5 = this;\n      return _asyncToGenerator(function* () {\n        _this5.throwUnavailableError();\n      })();\n    }\n    subscribeToTopic(_options) {\n      var _this6 = this;\n      return _asyncToGenerator(function* () {\n        _this6.throwUnavailableError();\n      })();\n    }\n    unsubscribeFromTopic(_options) {\n      var _this7 = this;\n      return _asyncToGenerator(function* () {\n        _this7.throwUnavailableError();\n      })();\n    }\n    createChannel(_options) {\n      var _this8 = this;\n      return _asyncToGenerator(function* () {\n        _this8.throwUnavailableError();\n      })();\n    }\n    deleteChannel(_options) {\n      var _this9 = this;\n      return _asyncToGenerator(function* () {\n        _this9.throwUnavailableError();\n      })();\n    }\n    listChannels() {\n      var _this10 = this;\n      return _asyncToGenerator(function* () {\n        _this10.throwUnavailableError();\n      })();\n    }\n    handleNotificationReceived(messagePayload) {\n      const notification = this.createNotificationResult(messagePayload);\n      const event = {\n        notification\n      };\n      this.notifyListeners(FirebaseMessagingWeb.notificationReceivedEvent, event);\n    }\n    createNotificationResult(messagePayload) {\n      var _a, _b, _c;\n      const notification = {\n        body: (_a = messagePayload.notification) === null || _a === void 0 ? void 0 : _a.body,\n        data: messagePayload.data,\n        id: messagePayload.messageId,\n        image: (_b = messagePayload.notification) === null || _b === void 0 ? void 0 : _b.image,\n        title: (_c = messagePayload.notification) === null || _c === void 0 ? void 0 : _c.title\n      };\n      return notification;\n    }\n    convertNotificationPermissionToPermissionState(permission) {\n      let state = 'prompt';\n      switch (permission) {\n        case 'granted':\n          state = 'granted';\n          break;\n        case 'denied':\n          state = 'denied';\n          break;\n      }\n      return state;\n    }\n    throwUnavailableError() {\n      throw this.unavailable('Not available on web.');\n    }\n  }\n  FirebaseMessagingWeb.notificationReceivedEvent = 'notificationReceived';\n  //# sourceMappingURL=web.js.map\n  return FirebaseMessagingWeb;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}